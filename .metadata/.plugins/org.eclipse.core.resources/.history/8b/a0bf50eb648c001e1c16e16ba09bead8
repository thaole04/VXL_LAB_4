/*
 * scheduler.c
 *
 *  Created on: Nov 24, 2023
 *      Author: thao2
 */

#include "global.h"
#include "scheduler.h"
#include "software_timer.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
unsigned char Error_code_G = 0;
uint8_t current_index_task = 0;


// Other function help to do:
void Shift_Task_To_Left(int index_a, int index_b) {
	SCH_tasks_G[index_a].pTask = SCH_tasks_G[index_b].pTask;
	SCH_tasks_G[index_a].Delay = SCH_tasks_G[index_b].Delay;
	SCH_tasks_G[index_a].Period =  SCH_tasks_G[index_b].Period;
	SCH_tasks_G[index_a].RunMe = SCH_tasks_G[index_b].RunMe;

	SCH_tasks_G[index_a].TaskID = SCH_tasks_G[index_b].TaskID;
}

// extra function
void update_other_tasks() {
	for (int i = 0; i < current_index_task; i++) {
		if (i == min_index) {
			continue;
		}

		SCH_tasks_G[i].Delay -= min_delay;
	}

	find_new_min_task();
}




void SCH_Init(void){
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++){
		SCH_Delete_Task(i);
	}
	// Reset the global error variable
	// SCH_Delete_Task() will generate an error code
	// (because the task array is empty)
	Error_code_G = 0;
	Timer_init();
}
void SCH_Update() {
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
/*
 SCH_Add_Task() causes a task (function) to be executed at regular intervals or after a user-defined delay
 */
uint32_t SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD){
	unsigned char Index = 0;
	// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
		Index++;
	}
	// Have we reached the end of the list?
	if (Index == SCH_MAX_TASKS){
		// Task list is full
		// Set the global  error variable
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
		// Also return an error code
		return SCH_MAX_TASKS;
	}
	// If we're here, there is a space in the task array
	SCH_tasks_G[Index].pTask = pFunction;
	SCH_tasks_G[Index].Delay = DELAY;
	SCH_tasks_G[Index].Period = PERIOD;
	SCH_tasks_G[Index].RunMe = 0;
	// return position of task (to allow later deletion)
	return Index;
}
void SCH_Dispatch_Tasks(void){
	unsigned char Index;
	// Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++){
		if (SCH_tasks_G[Index].RunMe > 0){
			// run the task
			(*SCH_tasks_G[Index].pTask)();
			// reset/reduce flag RunMe flag
			SCH_tasks_G[Index].RunMe -= 1;
			// Periodic tasks will automatically run again
			// if this is a 'one shot' task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0){
				SCH_Delete_Task(Index);
			}
		}
	}
	// report system status
	SCH_Report_Status();
}
uint8_t SCH_Delete_Task(const uint8_t TASK_INDEX){
	unsigned char Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0){
		// No task at this location
		//
		// Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;

		// also return an error code
		Return_code = RETURN_ERROR;
	} else {
		Return_code = RETURN_NORMAL;
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
	SCH_tasks_G[TASK_INDEX].Delay = 0;
	SCH_tasks_G[TASK_INDEX].Period = 0;
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
	// return status
	return Return_code;
}
void SCH_Report_Status(void){
#ifdef SCH_REPORT_ERRORS
	// ONLY APPLLIES IF WE ARE REPORTING ERRORS
	// Check for a new error code
	if (Error_code_G != Last_error_code_G){
		// Negative logic on LEDs assumed
		Error_port = 255 - Error_code_G;
		Last_error_code_G = Error_code_G;
		if (Error_code_G != 0){
			Error_tick_count_G = 60000;
		} else {
			Error_tick_count_G = 0;
		}
	} else {
		if (Error_tick_count_G != 0){
			if (--Error_tick_count == 0){
				Error_code_G = 0; // reset error code
			}
		}
	}
#endif
}



