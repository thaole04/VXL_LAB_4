
LAB4_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004074  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042bc  080042bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080042bc  080042bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042bc  080042bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000070  08004334  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08004334  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110a2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a9  00000000  00000000  0003113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000339e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019592  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000103f8  00000000  00000000  0004dd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a66f  00000000  00000000  0005e17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e87e9  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000cd8  00000000  00000000  000e8840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd8  00000000  00000000  000e9518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004168 	.word	0x08004168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004168 	.word	0x08004168

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe40 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f844 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f910 	bl	800037c <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f898 	bl	8000290 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8e2 	bl	8000328 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000164:	f000 f87a 	bl	800025c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000168:	4815      	ldr	r0, [pc, #84]	; (80001c0 <main+0x74>)
 800016a:	f001 feaf 	bl	8001ecc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 800016e:	f000 fa21 	bl	80005b4 <SCH_Init>
  SCH_Add_Task(&task0, 0, 50);
 8000172:	2232      	movs	r2, #50	; 0x32
 8000174:	2100      	movs	r1, #0
 8000176:	4813      	ldr	r0, [pc, #76]	; (80001c4 <main+0x78>)
 8000178:	f000 fa96 	bl	80006a8 <SCH_Add_Task>
  SCH_Add_Task(&task1, 3, 100);
 800017c:	2264      	movs	r2, #100	; 0x64
 800017e:	2103      	movs	r1, #3
 8000180:	4811      	ldr	r0, [pc, #68]	; (80001c8 <main+0x7c>)
 8000182:	f000 fa91 	bl	80006a8 <SCH_Add_Task>
  SCH_Add_Task(&task2, 7, 150);
 8000186:	2296      	movs	r2, #150	; 0x96
 8000188:	2107      	movs	r1, #7
 800018a:	4810      	ldr	r0, [pc, #64]	; (80001cc <main+0x80>)
 800018c:	f000 fa8c 	bl	80006a8 <SCH_Add_Task>
  SCH_Add_Task(&task3, 11, 200);
 8000190:	22c8      	movs	r2, #200	; 0xc8
 8000192:	210b      	movs	r1, #11
 8000194:	480e      	ldr	r0, [pc, #56]	; (80001d0 <main+0x84>)
 8000196:	f000 fa87 	bl	80006a8 <SCH_Add_Task>
  SCH_Add_Task(&task4, 15, 250);
 800019a:	22fa      	movs	r2, #250	; 0xfa
 800019c:	210f      	movs	r1, #15
 800019e:	480d      	ldr	r0, [pc, #52]	; (80001d4 <main+0x88>)
 80001a0:	f000 fa82 	bl	80006a8 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 80001a4:	f000 fae2 	bl	800076c <SCH_Dispatch_Tasks>
	  if (timer0_flag == 1){
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <main+0x8c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d1f9      	bne.n	80001a4 <main+0x58>
		  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80001b0:	2104      	movs	r1, #4
 80001b2:	480a      	ldr	r0, [pc, #40]	; (80001dc <main+0x90>)
 80001b4:	f001 f9c2 	bl	800153c <HAL_GPIO_TogglePin>
		  setTimer0(50);
 80001b8:	2032      	movs	r0, #50	; 0x32
 80001ba:	f000 fbbb 	bl	8000934 <setTimer0>
	  SCH_Dispatch_Tasks();
 80001be:	e7f1      	b.n	80001a4 <main+0x58>
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08000c81 	.word	0x08000c81
 80001c8:	08000ca9 	.word	0x08000ca9
 80001cc:	08000cd1 	.word	0x08000cd1
 80001d0:	08000cf9 	.word	0x08000cf9
 80001d4:	08000d21 	.word	0x08000d21
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	40010800 	.word	0x40010800

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	; 0x40
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f003 f852 	bl	8003298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000202:	230a      	movs	r3, #10
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020a:	2310      	movs	r3, #16
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f9f8 	bl	8001610 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000226:	f000 f90d 	bl	8000444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fc64 	bl	8001b10 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800024e:	f000 f8f9 	bl	8000444 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_IWDG_Init+0x2c>)
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <MX_IWDG_Init+0x30>)
 8000264:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <MX_IWDG_Init+0x2c>)
 8000268:	2200      	movs	r2, #0
 800026a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_IWDG_Init+0x2c>)
 800026e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000272:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_IWDG_Init+0x2c>)
 8000276:	f001 f97a 	bl	800156e <HAL_IWDG_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000280:	f000 f8e0 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000b0 	.word	0x200000b0
 800028c:	40003000 	.word	0x40003000

08000290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <MX_TIM2_Init+0x94>)
 80002ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <MX_TIM2_Init+0x94>)
 80002b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002bc:	4b19      	ldr	r3, [pc, #100]	; (8000324 <MX_TIM2_Init+0x94>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <MX_TIM2_Init+0x94>)
 80002c4:	2209      	movs	r2, #9
 80002c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_TIM2_Init+0x94>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <MX_TIM2_Init+0x94>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d4:	4813      	ldr	r0, [pc, #76]	; (8000324 <MX_TIM2_Init+0x94>)
 80002d6:	f001 fda9 	bl	8001e2c <HAL_TIM_Base_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002e0:	f000 f8b0 	bl	8000444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	4619      	mov	r1, r3
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <MX_TIM2_Init+0x94>)
 80002f2:	f001 ff3f 	bl	8002174 <HAL_TIM_ConfigClockSource>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002fc:	f000 f8a2 	bl	8000444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000308:	463b      	mov	r3, r7
 800030a:	4619      	mov	r1, r3
 800030c:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_TIM2_Init+0x94>)
 800030e:	f002 f90b 	bl	8002528 <HAL_TIMEx_MasterConfigSynchronization>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000318:	f000 f894 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000104 	.word	0x20000104

08000328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_USART1_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000360:	f002 f94c 	bl	80025fc <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800036a:	f000 f86b 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000bc 	.word	0x200000bc
 8000378:	40013800 	.word	0x40013800

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_GPIO_Init+0x8c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <MX_GPIO_Init+0x8c>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_GPIO_Init+0x8c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a16      	ldr	r2, [pc, #88]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|TASK0_Pin|TASK1_Pin|TASK2_Pin
 80003c0:	2200      	movs	r2, #0
 80003c2:	21fc      	movs	r1, #252	; 0xfc
 80003c4:	4811      	ldr	r0, [pc, #68]	; (800040c <MX_GPIO_Init+0x90>)
 80003c6:	f001 f8a1 	bl	800150c <HAL_GPIO_WritePin>
                          |TASK3_Pin|TASK4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_STATUS_Pin TASK0_Pin TASK1_Pin TASK2_Pin
                           TASK3_Pin TASK4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|TASK0_Pin|TASK1_Pin|TASK2_Pin
 80003ca:	23fc      	movs	r3, #252	; 0xfc
 80003cc:	60bb      	str	r3, [r7, #8]
                          |TASK3_Pin|TASK4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d6:	2302      	movs	r3, #2
 80003d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	4619      	mov	r1, r3
 80003e0:	480a      	ldr	r0, [pc, #40]	; (800040c <MX_GPIO_Init+0x90>)
 80003e2:	f000 ff19 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_Pin */
  GPIO_InitStruct.Pin = INPUT_Pin;
 80003e6:	2301      	movs	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_GPIO_Init+0x94>)
 80003fa:	f000 ff0d 	bl	8001218 <HAL_GPIO_Init>

}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	40010800 	.word	0x40010800
 8000410:	40010c00 	.word	0x40010c00

08000414 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	// Timer TODO
	if (htim->Instance == TIM2) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000424:	d108      	bne.n	8000438 <HAL_TIM_PeriodElapsedCallback+0x24>
		timer++; // increase timestamp by 10ms
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800042e:	6013      	str	r3, [r2, #0]
		timerRunTIM2();
 8000430:	f000 fa94 	bl	800095c <timerRunTIM2>
		SCH_Update();
 8000434:	f000 f8e2 	bl	80005fc <SCH_Update>
	}
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	2000008c 	.word	0x2000008c

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <swapTasks>:
uint8_t current_index_task = 0;


// Other function help to do:
// Swap two tasks
void swapTasks(int index_a, int index_b) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
	SCH_tasks_G[index_a].pTask = SCH_tasks_G[index_b].pTask;
 800045a:	492f      	ldr	r1, [pc, #188]	; (8000518 <swapTasks+0xc8>)
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	440b      	add	r3, r1
 8000468:	6819      	ldr	r1, [r3, #0]
 800046a:	482b      	ldr	r0, [pc, #172]	; (8000518 <swapTasks+0xc8>)
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4613      	mov	r3, r2
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4413      	add	r3, r2
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	4403      	add	r3, r0
 8000478:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].Delay = SCH_tasks_G[index_b].Delay;
 800047a:	4927      	ldr	r1, [pc, #156]	; (8000518 <swapTasks+0xc8>)
 800047c:	683a      	ldr	r2, [r7, #0]
 800047e:	4613      	mov	r3, r2
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4413      	add	r3, r2
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	440b      	add	r3, r1
 8000488:	3304      	adds	r3, #4
 800048a:	6819      	ldr	r1, [r3, #0]
 800048c:	4822      	ldr	r0, [pc, #136]	; (8000518 <swapTasks+0xc8>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4613      	mov	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4403      	add	r3, r0
 800049a:	3304      	adds	r3, #4
 800049c:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].Period =  SCH_tasks_G[index_b].Period;
 800049e:	491e      	ldr	r1, [pc, #120]	; (8000518 <swapTasks+0xc8>)
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	4613      	mov	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	440b      	add	r3, r1
 80004ac:	3308      	adds	r3, #8
 80004ae:	6819      	ldr	r1, [r3, #0]
 80004b0:	4819      	ldr	r0, [pc, #100]	; (8000518 <swapTasks+0xc8>)
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	4613      	mov	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4403      	add	r3, r0
 80004be:	3308      	adds	r3, #8
 80004c0:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].RunMe = SCH_tasks_G[index_b].RunMe;
 80004c2:	4915      	ldr	r1, [pc, #84]	; (8000518 <swapTasks+0xc8>)
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	4613      	mov	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4413      	add	r3, r2
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	440b      	add	r3, r1
 80004d0:	330c      	adds	r3, #12
 80004d2:	7818      	ldrb	r0, [r3, #0]
 80004d4:	4910      	ldr	r1, [pc, #64]	; (8000518 <swapTasks+0xc8>)
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	4613      	mov	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	440b      	add	r3, r1
 80004e2:	330c      	adds	r3, #12
 80004e4:	4602      	mov	r2, r0
 80004e6:	701a      	strb	r2, [r3, #0]

	SCH_tasks_G[index_a].TaskID = SCH_tasks_G[index_b].TaskID;
 80004e8:	490b      	ldr	r1, [pc, #44]	; (8000518 <swapTasks+0xc8>)
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	440b      	add	r3, r1
 80004f6:	3310      	adds	r3, #16
 80004f8:	6819      	ldr	r1, [r3, #0]
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <swapTasks+0xc8>)
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4613      	mov	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4413      	add	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4403      	add	r3, r0
 8000508:	3310      	adds	r3, #16
 800050a:	6019      	str	r1, [r3, #0]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	2000014c 	.word	0x2000014c

0800051c <find_new_min_index_task>:

// extra function
// function find the empty min index of array task
void find_new_min_index_task() {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
	// find new min index of schedule array
	min_index = 0;
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <find_new_min_index_task+0x88>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
	min_delay = SCH_tasks_G[min_index].Delay;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <find_new_min_index_task+0x88>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	491e      	ldr	r1, [pc, #120]	; (80005a8 <find_new_min_index_task+0x8c>)
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	3304      	adds	r3, #4
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <find_new_min_index_task+0x90>)
 8000540:	601a      	str	r2, [r3, #0]

	for (uint8_t i = min_index + 1; i < current_index_task; i++) {
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <find_new_min_index_task+0x88>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	3301      	adds	r3, #1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	e01e      	b.n	800058c <find_new_min_index_task+0x70>
		if (SCH_tasks_G[i].Delay < min_delay) {
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4915      	ldr	r1, [pc, #84]	; (80005a8 <find_new_min_index_task+0x8c>)
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	440b      	add	r3, r1
 800055c:	3304      	adds	r3, #4
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a12      	ldr	r2, [pc, #72]	; (80005ac <find_new_min_index_task+0x90>)
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	4293      	cmp	r3, r2
 8000566:	d20e      	bcs.n	8000586 <find_new_min_index_task+0x6a>
			min_index = i;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <find_new_min_index_task+0x88>)
 800056c:	6013      	str	r3, [r2, #0]
			min_delay = SCH_tasks_G[i].Delay;
 800056e:	79fa      	ldrb	r2, [r7, #7]
 8000570:	490d      	ldr	r1, [pc, #52]	; (80005a8 <find_new_min_index_task+0x8c>)
 8000572:	4613      	mov	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4413      	add	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	440b      	add	r3, r1
 800057c:	3304      	adds	r3, #4
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <find_new_min_index_task+0x90>)
 8000584:	601a      	str	r2, [r3, #0]
	for (uint8_t i = min_index + 1; i < current_index_task; i++) {
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	3301      	adds	r3, #1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <find_new_min_index_task+0x94>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	79fa      	ldrb	r2, [r7, #7]
 8000592:	429a      	cmp	r2, r3
 8000594:	d3db      	bcc.n	800054e <find_new_min_index_task+0x32>
		}
	}
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	2000014c 	.word	0x2000014c
 80005ac:	20000094 	.word	0x20000094
 80005b0:	20000099 	.word	0x20000099

080005b4 <SCH_Init>:

void SCH_Init(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	unsigned char i;
	// Check current to avoid error
	if (current_index_task != 0){
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <SCH_Init+0x40>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <SCH_Init+0x28>
		for (i = 0; i < SCH_MAX_TASKS; i++){
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e006      	b.n	80005d6 <SCH_Init+0x22>
			SCH_Delete_Task(i);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f948 	bl	8000860 <SCH_Delete_Task>
		for (i = 0; i < SCH_MAX_TASKS; i++){
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	3301      	adds	r3, #1
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b27      	cmp	r3, #39	; 0x27
 80005da:	d9f5      	bls.n	80005c8 <SCH_Init+0x14>
		}
	}
	// Reset the global error variable
	// SCH_Delete_Task() will generate an error code
	// (because the task array is empty)
	Error_code_G = 0;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <SCH_Init+0x44>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	Timer_init();
 80005e2:	f000 f9d5 	bl	8000990 <Timer_init>
	find_new_min_index_task();
 80005e6:	f7ff ff99 	bl	800051c <find_new_min_index_task>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000099 	.word	0x20000099
 80005f8:	20000098 	.word	0x20000098

080005fc <SCH_Update>:


void SCH_Update() {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	// Reduce Delay
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <SCH_Update+0xa4>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4927      	ldr	r1, [pc, #156]	; (80006a4 <SCH_Update+0xa8>)
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	3304      	adds	r3, #4
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d013      	beq.n	8000640 <SCH_Update+0x44>
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <SCH_Update+0xa4>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4921      	ldr	r1, [pc, #132]	; (80006a4 <SCH_Update+0xa8>)
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	440b      	add	r3, r1
 8000628:	3304      	adds	r3, #4
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1e59      	subs	r1, r3, #1
 800062e:	481d      	ldr	r0, [pc, #116]	; (80006a4 <SCH_Update+0xa8>)
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4403      	add	r3, r0
 800063a:	3304      	adds	r3, #4
 800063c:	6019      	str	r1, [r3, #0]
	// Reset Delay and update flag RunMe
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 800063e:	e02a      	b.n	8000696 <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <SCH_Update+0xa4>)
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <SCH_Update+0xa4>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4816      	ldr	r0, [pc, #88]	; (80006a4 <SCH_Update+0xa8>)
 800064a:	460b      	mov	r3, r1
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	440b      	add	r3, r1
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4403      	add	r3, r0
 8000654:	3308      	adds	r3, #8
 8000656:	6819      	ldr	r1, [r3, #0]
 8000658:	4812      	ldr	r0, [pc, #72]	; (80006a4 <SCH_Update+0xa8>)
 800065a:	4613      	mov	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4403      	add	r3, r0
 8000664:	3304      	adds	r3, #4
 8000666:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <SCH_Update+0xa4>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	490d      	ldr	r1, [pc, #52]	; (80006a4 <SCH_Update+0xa8>)
 800066e:	4613      	mov	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	440b      	add	r3, r1
 8000678:	330c      	adds	r3, #12
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <SCH_Update+0xa4>)
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	b2d8      	uxtb	r0, r3
 8000684:	4907      	ldr	r1, [pc, #28]	; (80006a4 <SCH_Update+0xa8>)
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	330c      	adds	r3, #12
 8000692:	4602      	mov	r2, r0
 8000694:	701a      	strb	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000090 	.word	0x20000090
 80006a4:	2000014c 	.word	0x2000014c

080006a8 <SCH_Add_Task>:
/*
 SCH_Add_Task() causes a task (function) to be executed at regular intervals or after a user-defined delay
 */
uint32_t SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD){
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	// If SCH_Init run first, then assign current_index_task to 0
	unsigned char Return_code;

	if(current_index_task < SCH_MAX_TASKS){
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <SCH_Add_Task+0xb8>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b27      	cmp	r3, #39	; 0x27
 80006ba:	d845      	bhi.n	8000748 <SCH_Add_Task+0xa0>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SCH_Add_Task+0xb8>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4a28      	ldr	r2, [pc, #160]	; (8000764 <SCH_Add_Task+0xbc>)
 80006c4:	460b      	mov	r3, r1
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <SCH_Add_Task+0xb8>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <SCH_Add_Task+0xbc>)
 80006da:	460b      	mov	r3, r1
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	440b      	add	r3, r1
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	3304      	adds	r3, #4
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <SCH_Add_Task+0xb8>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <SCH_Add_Task+0xbc>)
 80006f2:	460b      	mov	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	3308      	adds	r3, #8
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <SCH_Add_Task+0xb8>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	4a16      	ldr	r2, [pc, #88]	; (8000764 <SCH_Add_Task+0xbc>)
 800070a:	460b      	mov	r3, r1
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	440b      	add	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	330c      	adds	r3, #12
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <SCH_Add_Task+0xb8>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <SCH_Add_Task+0xb8>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	4610      	mov	r0, r2
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <SCH_Add_Task+0xbc>)
 8000728:	460b      	mov	r3, r1
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	3310      	adds	r3, #16
 8000734:	6018      	str	r0, [r3, #0]

		current_index_task++;
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <SCH_Add_Task+0xb8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <SCH_Add_Task+0xb8>)
 8000740:	701a      	strb	r2, [r3, #0]

		Return_code = RETURN_NORMAL;
 8000742:	2300      	movs	r3, #0
 8000744:	75fb      	strb	r3, [r7, #23]
 8000746:	e004      	b.n	8000752 <SCH_Add_Task+0xaa>

	} else {
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <SCH_Add_Task+0xc0>)
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	75fb      	strb	r3, [r7, #23]
	}

	return Return_code;
 8000752:	7dfb      	ldrb	r3, [r7, #23]
}
 8000754:	4618      	mov	r0, r3
 8000756:	371c      	adds	r7, #28
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000099 	.word	0x20000099
 8000764:	2000014c 	.word	0x2000014c
 8000768:	20000098 	.word	0x20000098

0800076c <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	int i = min_index;
 8000772:	4b37      	ldr	r3, [pc, #220]	; (8000850 <SCH_Dispatch_Tasks+0xe4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	603b      	str	r3, [r7, #0]
	// check flag of min_index
	if (SCH_tasks_G[i].RunMe > 0) {
 8000778:	4936      	ldr	r1, [pc, #216]	; (8000854 <SCH_Dispatch_Tasks+0xe8>)
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	330c      	adds	r3, #12
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d057      	beq.n	800083e <SCH_Dispatch_Tasks+0xd2>
		for (uint8_t i = 0; i < current_index_task; i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	e01f      	b.n	80007d4 <SCH_Dispatch_Tasks+0x68>
			if (i == min_index) {
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <SCH_Dispatch_Tasks+0xe4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d016      	beq.n	80007cc <SCH_Dispatch_Tasks+0x60>
				continue;
			}
			SCH_tasks_G[i].Delay -= min_delay;
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	492c      	ldr	r1, [pc, #176]	; (8000854 <SCH_Dispatch_Tasks+0xe8>)
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	440b      	add	r3, r1
 80007ac:	3304      	adds	r3, #4
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a29      	ldr	r2, [pc, #164]	; (8000858 <SCH_Dispatch_Tasks+0xec>)
 80007b2:	6812      	ldr	r2, [r2, #0]
 80007b4:	4611      	mov	r1, r2
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	1a59      	subs	r1, r3, r1
 80007ba:	4826      	ldr	r0, [pc, #152]	; (8000854 <SCH_Dispatch_Tasks+0xe8>)
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4403      	add	r3, r0
 80007c6:	3304      	adds	r3, #4
 80007c8:	6019      	str	r1, [r3, #0]
 80007ca:	e000      	b.n	80007ce <SCH_Dispatch_Tasks+0x62>
				continue;
 80007cc:	bf00      	nop
		for (uint8_t i = 0; i < current_index_task; i++) {
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3301      	adds	r3, #1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <SCH_Dispatch_Tasks+0xf0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d3da      	bcc.n	8000794 <SCH_Dispatch_Tasks+0x28>
		}
		find_new_min_index_task();
 80007de:	f7ff fe9d 	bl	800051c <find_new_min_index_task>
		(*SCH_tasks_G[i].pTask)();
 80007e2:	491c      	ldr	r1, [pc, #112]	; (8000854 <SCH_Dispatch_Tasks+0xe8>)
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	440b      	add	r3, r1
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4798      	blx	r3
		SCH_tasks_G[i].RunMe--;
 80007f4:	4917      	ldr	r1, [pc, #92]	; (8000854 <SCH_Dispatch_Tasks+0xe8>)
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	330c      	adds	r3, #12
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3b01      	subs	r3, #1
 8000808:	b2d8      	uxtb	r0, r3
 800080a:	4912      	ldr	r1, [pc, #72]	; (8000854 <SCH_Dispatch_Tasks+0xe8>)
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	330c      	adds	r3, #12
 800081a:	4602      	mov	r2, r0
 800081c:	701a      	strb	r2, [r3, #0]
		// If it's one-shot task, remove it form the array
		if (SCH_tasks_G[i].Period == 0) {
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <SCH_Dispatch_Tasks+0xe8>)
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	440b      	add	r3, r1
 800082c:	3308      	adds	r3, #8
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d104      	bne.n	800083e <SCH_Dispatch_Tasks+0xd2>
			SCH_Delete_Task(i);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f811 	bl	8000860 <SCH_Delete_Task>
		}
	}
	// Report system status
	SCH_Report_Status();
 800083e:	f000 f873 	bl	8000928 <SCH_Report_Status>
	// Refresh Watchdog
	Watchdog_Refresh();
 8000842:	f000 fa97 	bl	8000d74 <Watchdog_Refresh>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000090 	.word	0x20000090
 8000854:	2000014c 	.word	0x2000014c
 8000858:	20000094 	.word	0x20000094
 800085c:	20000099 	.word	0x20000099

08000860 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(const uint8_t TASK_INDEX){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code;
	if (current_index_task < 0 || current_index_task >= SCH_MAX_TASKS) {
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <SCH_Delete_Task+0xbc>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b27      	cmp	r3, #39	; 0x27
 8000870:	d906      	bls.n	8000880 <SCH_Delete_Task+0x20>
		// No task at this location...
		// Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <SCH_Delete_Task+0xc0>)
 8000874:	2203      	movs	r2, #3
 8000876:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		return Return_code;
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	e049      	b.n	8000914 <SCH_Delete_Task+0xb4>
	} else {
		Return_code = RETURN_NORMAL;
 8000880:	2300      	movs	r3, #0
 8000882:	73bb      	strb	r3, [r7, #14]
	}
	// Shift all tasks from TASK_INDEX + 1 to the left
	for (uint8_t i = TASK_INDEX; i < current_index_task; i++) {
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e009      	b.n	800089e <SCH_Delete_Task+0x3e>
		swapTasks(i, i + 1);
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	3301      	adds	r3, #1
 8000890:	4619      	mov	r1, r3
 8000892:	4610      	mov	r0, r2
 8000894:	f7ff fddc 	bl	8000450 <swapTasks>
	for (uint8_t i = TASK_INDEX; i < current_index_task; i++) {
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	3301      	adds	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <SCH_Delete_Task+0xbc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d3f0      	bcc.n	800088a <SCH_Delete_Task+0x2a>
	}
	// Remove last index task
	SCH_tasks_G[current_index_task].pTask = 0x0000 ;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <SCH_Delete_Task+0xbc>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <SCH_Delete_Task+0xc4>)
 80008b0:	460b      	mov	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Delay = 0;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <SCH_Delete_Task+0xbc>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <SCH_Delete_Task+0xc4>)
 80008c6:	460b      	mov	r3, r1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	3304      	adds	r3, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Period = 0;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <SCH_Delete_Task+0xbc>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	4a11      	ldr	r2, [pc, #68]	; (8000924 <SCH_Delete_Task+0xc4>)
 80008de:	460b      	mov	r3, r1
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	3308      	adds	r3, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].RunMe = 0;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <SCH_Delete_Task+0xbc>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <SCH_Delete_Task+0xc4>)
 80008f6:	460b      	mov	r3, r1
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	440b      	add	r3, r1
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	330c      	adds	r3, #12
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <SCH_Delete_Task+0xbc>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	3b01      	subs	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <SCH_Delete_Task+0xbc>)
 8000910:	701a      	strb	r2, [r3, #0]

	return Return_code;
 8000912:	7bbb      	ldrb	r3, [r7, #14]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000099 	.word	0x20000099
 8000920:	20000098 	.word	0x20000098
 8000924:	2000014c 	.word	0x2000014c

08000928 <SCH_Report_Status>:
void SCH_Report_Status(void){
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
				Error_code_G = 0; // reset error code
			}
		}
	}
#endif
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <setTimer0>:

// timer for main system
int timer0_counter = 0;
int timer0_flag = 0;

void setTimer0(int duration){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <setTimer0+0x20>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <setTimer0+0x24>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2000009c 	.word	0x2000009c
 8000958:	200000a0 	.word	0x200000a0

0800095c <timerRunTIM2>:
void timerRunTIM2(){
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	if (timer0_counter > 0){
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <timerRunTIM2+0x2c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	dd0b      	ble.n	8000980 <timerRunTIM2+0x24>
		timer0_counter--;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <timerRunTIM2+0x2c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	4a06      	ldr	r2, [pc, #24]	; (8000988 <timerRunTIM2+0x2c>)
 8000970:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0){
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <timerRunTIM2+0x2c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	dc02      	bgt.n	8000980 <timerRunTIM2+0x24>
			timer0_flag = 1;
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <timerRunTIM2+0x30>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	2000009c 	.word	0x2000009c
 800098c:	200000a0 	.word	0x200000a0

08000990 <Timer_init>:
void Timer_init(){
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	setTimer0(50);
 8000994:	2032      	movs	r0, #50	; 0x32
 8000996:	f7ff ffcd 	bl	8000934 <setTimer0>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_MspInit+0x5c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <HAL_MspInit+0x5c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x5c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x5c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_MspInit+0x60>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_MspInit+0x60>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010000 	.word	0x40010000

08000a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a14:	d113      	bne.n	8000a3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_TIM_Base_MspInit+0x44>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_TIM_Base_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_TIM_Base_MspInit+0x44>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	201c      	movs	r0, #28
 8000a34:	f000 fb07 	bl	8001046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a38:	201c      	movs	r0, #28
 8000a3a:	f000 fb20 	bl	800107e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <HAL_UART_MspInit+0x9c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d139      	bne.n	8000ae0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_UART_MspInit+0xa0>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_UART_MspInit+0xa0>)
 8000a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_UART_MspInit+0xa0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_UART_MspInit+0xa0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <HAL_UART_MspInit+0xa0>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_UART_MspInit+0xa0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480f      	ldr	r0, [pc, #60]	; (8000af0 <HAL_UART_MspInit+0xa4>)
 8000ab2:	f000 fbb1 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4809      	ldr	r0, [pc, #36]	; (8000af0 <HAL_UART_MspInit+0xa4>)
 8000acc:	f000 fba4 	bl	8001218 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2025      	movs	r0, #37	; 0x25
 8000ad6:	f000 fab6 	bl	8001046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ada:	2025      	movs	r0, #37	; 0x25
 8000adc:	f000 facf 	bl	800107e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010800 	.word	0x40010800

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f991 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <TIM2_IRQHandler+0x10>)
 8000b4a:	f001 fa0b 	bl	8001f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000104 	.word	0x20000104

08000b58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <USART1_IRQHandler+0x10>)
 8000b5e:	f001 fe21 	bl	80027a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000bc 	.word	0x200000bc

08000b6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e00a      	b.n	8000b94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b7e:	f3af 8000 	nop.w
 8000b82:	4601      	mov	r1, r0
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	b2ca      	uxtb	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf0      	blt.n	8000b7e <_read+0x12>
	}

return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	return -1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bcc:	605a      	str	r2, [r3, #4]
	return 0;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <_isatty>:

int _isatty(int file)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
	return 1;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
	return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f002 fb04 	bl	8003244 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20002800 	.word	0x20002800
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200000a4 	.word	0x200000a4
 8000c70:	20000480 	.word	0x20000480

08000c74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <task0>:
#include "uart.h"
#include "global.h"
#include <stdio.h>
#include "main.h"

void task0() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	printf("Task0 exec at: %d0ms\r\n", timer);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <task0+0x1c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <task0+0x20>)
 8000c8c:	f002 fb0c 	bl	80032a8 <iprintf>
	HAL_GPIO_TogglePin(TASK0_GPIO_Port, TASK0_Pin);
 8000c90:	2108      	movs	r1, #8
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <task0+0x24>)
 8000c94:	f000 fc52 	bl	800153c <HAL_GPIO_TogglePin>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000008c 	.word	0x2000008c
 8000ca0:	08004180 	.word	0x08004180
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <task1>:

void task1() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	printf("Task1 exec at: %d0ms\r\n", timer);
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <task1+0x1c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <task1+0x20>)
 8000cb4:	f002 faf8 	bl	80032a8 <iprintf>
	HAL_GPIO_TogglePin(TASK1_GPIO_Port, TASK1_Pin);
 8000cb8:	2110      	movs	r1, #16
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <task1+0x24>)
 8000cbc:	f000 fc3e 	bl	800153c <HAL_GPIO_TogglePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000008c 	.word	0x2000008c
 8000cc8:	08004198 	.word	0x08004198
 8000ccc:	40010800 	.word	0x40010800

08000cd0 <task2>:

void task2() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	printf("Task2 exec at: %d0ms\r\n", timer);
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <task2+0x1c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <task2+0x20>)
 8000cdc:	f002 fae4 	bl	80032a8 <iprintf>
	HAL_GPIO_TogglePin(TASK2_GPIO_Port, TASK2_Pin);
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <task2+0x24>)
 8000ce4:	f000 fc2a 	bl	800153c <HAL_GPIO_TogglePin>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	080041b0 	.word	0x080041b0
 8000cf4:	40010800 	.word	0x40010800

08000cf8 <task3>:

void task3() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	printf("Task3 exec at: %d0ms\r\n", timer);
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <task3+0x1c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <task3+0x20>)
 8000d04:	f002 fad0 	bl	80032a8 <iprintf>
	HAL_GPIO_TogglePin(TASK3_GPIO_Port, TASK3_Pin);
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	4804      	ldr	r0, [pc, #16]	; (8000d1c <task3+0x24>)
 8000d0c:	f000 fc16 	bl	800153c <HAL_GPIO_TogglePin>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000008c 	.word	0x2000008c
 8000d18:	080041c8 	.word	0x080041c8
 8000d1c:	40010800 	.word	0x40010800

08000d20 <task4>:

void task4() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	printf("Task4 exec at: %d0ms\r\n", timer);
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <task4+0x1c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <task4+0x20>)
 8000d2c:	f002 fabc 	bl	80032a8 <iprintf>
	HAL_GPIO_TogglePin(TASK4_GPIO_Port, TASK4_Pin);
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	4804      	ldr	r0, [pc, #16]	; (8000d44 <task4+0x24>)
 8000d34:	f000 fc02 	bl	800153c <HAL_GPIO_TogglePin>
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000008c 	.word	0x2000008c
 8000d40:	080041e0 	.word	0x080041e0
 8000d44:	40010800 	.word	0x40010800

08000d48 <_write>:
#include "uart.h"

UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	4804      	ldr	r0, [pc, #16]	; (8000d70 <_write+0x28>)
 8000d60:	f001 fc9c 	bl	800269c <HAL_UART_Transmit>
	return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200000bc 	.word	0x200000bc

08000d74 <Watchdog_Refresh>:
#include "watchdog.h"

IWDG_HandleTypeDef hiwdg;
static uint32_t counter_for_watchdog = 0;

void Watchdog_Refresh(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <Watchdog_Refresh+0x10>)
 8000d7a:	f000 fc3a 	bl	80015f2 <HAL_IWDG_Refresh>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000b0 	.word	0x200000b0

08000d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff ff74 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8e:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da4:	4c09      	ldr	r4, [pc, #36]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 fa4d 	bl	8003250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db6:	f7ff f9c9 	bl	800014c <main>
  bx lr
 8000dba:	4770      	bx	lr
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dc4:	080042c4 	.word	0x080042c4
  ldr r2, =_sbss
 8000dc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dcc:	20000480 	.word	0x20000480

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x28>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x28>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f923 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fdd6 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f93b 	bl	800109a <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f903 	bl	8001046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_IncTick+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	2000046c 	.word	0x2000046c

08000e84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	2000046c 	.word	0x2000046c

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4906      	ldr	r1, [pc, #24]	; (8000f30 <__NVIC_EnableIRQ+0x34>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff90 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff2d 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff42 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff90 	bl	8000f88 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5f 	bl	8000f34 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff35 	bl	8000efc <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa2 	bl	8000fec <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d008      	beq.n	80010dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2204      	movs	r2, #4
 80010ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e020      	b.n	800111e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 020e 	bic.w	r2, r2, #14
 80010ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f202 	lsl.w	r2, r1, r2
 800110a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d005      	beq.n	800114c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2204      	movs	r2, #4
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e051      	b.n	80011f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020e 	bic.w	r2, r2, #14
 800115a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <HAL_DMA_Abort_IT+0xd4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d029      	beq.n	80011ca <HAL_DMA_Abort_IT+0xa2>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_DMA_Abort_IT+0xd8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d022      	beq.n	80011c6 <HAL_DMA_Abort_IT+0x9e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_DMA_Abort_IT+0xdc>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01a      	beq.n	80011c0 <HAL_DMA_Abort_IT+0x98>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_DMA_Abort_IT+0xe0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d012      	beq.n	80011ba <HAL_DMA_Abort_IT+0x92>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a1c      	ldr	r2, [pc, #112]	; (800120c <HAL_DMA_Abort_IT+0xe4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00a      	beq.n	80011b4 <HAL_DMA_Abort_IT+0x8c>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_DMA_Abort_IT+0xe8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d102      	bne.n	80011ae <HAL_DMA_Abort_IT+0x86>
 80011a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ac:	e00e      	b.n	80011cc <HAL_DMA_Abort_IT+0xa4>
 80011ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011b2:	e00b      	b.n	80011cc <HAL_DMA_Abort_IT+0xa4>
 80011b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b8:	e008      	b.n	80011cc <HAL_DMA_Abort_IT+0xa4>
 80011ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011be:	e005      	b.n	80011cc <HAL_DMA_Abort_IT+0xa4>
 80011c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c4:	e002      	b.n	80011cc <HAL_DMA_Abort_IT+0xa4>
 80011c6:	2310      	movs	r3, #16
 80011c8:	e000      	b.n	80011cc <HAL_DMA_Abort_IT+0xa4>
 80011ca:	2301      	movs	r3, #1
 80011cc:	4a11      	ldr	r2, [pc, #68]	; (8001214 <HAL_DMA_Abort_IT+0xec>)
 80011ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	4798      	blx	r3
    } 
  }
  return status;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40020008 	.word	0x40020008
 8001200:	4002001c 	.word	0x4002001c
 8001204:	40020030 	.word	0x40020030
 8001208:	40020044 	.word	0x40020044
 800120c:	40020058 	.word	0x40020058
 8001210:	4002006c 	.word	0x4002006c
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e148      	b.n	80014be <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8137 	bne.w	80014b8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4aa3      	ldr	r2, [pc, #652]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4aa1      	ldr	r2, [pc, #644]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4aa1      	ldr	r2, [pc, #644]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a9f      	ldr	r2, [pc, #636]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a9f      	ldr	r2, [pc, #636]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a9d      	ldr	r2, [pc, #628]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a9d      	ldr	r2, [pc, #628]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a9b      	ldr	r2, [pc, #620]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a9b      	ldr	r2, [pc, #620]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a99      	ldr	r2, [pc, #612]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a82      	ldr	r2, [pc, #520]	; (80014f0 <HAL_GPIO_Init+0x2d8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	; 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8090 	beq.w	80014b8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a55      	ldr	r2, [pc, #340]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x2e4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1dc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a47      	ldr	r2, [pc, #284]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1d8>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f8:	2300      	movs	r3, #0
 80013fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140a:	493b      	ldr	r1, [pc, #236]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001424:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	4933      	ldr	r1, [pc, #204]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800143c:	4013      	ands	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	492d      	ldr	r1, [pc, #180]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4929      	ldr	r1, [pc, #164]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001464:	4013      	ands	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4923      	ldr	r1, [pc, #140]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	491f      	ldr	r1, [pc, #124]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800148c:	4013      	ands	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4919      	ldr	r1, [pc, #100]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4915      	ldr	r1, [pc, #84]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	3301      	adds	r3, #1
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f47f aeaf 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	372c      	adds	r7, #44	; 0x2c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	10320000 	.word	0x10320000
 80014e0:	10310000 	.word	0x10310000
 80014e4:	10220000 	.word	0x10220000
 80014e8:	10210000 	.word	0x10210000
 80014ec:	10120000 	.word	0x10120000
 80014f0:	10110000 	.word	0x10110000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	40010800 	.word	0x40010800
 8001500:	40010c00 	.word	0x40010c00
 8001504:	40011000 	.word	0x40011000
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	611a      	str	r2, [r3, #16]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43d9      	mvns	r1, r3
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	400b      	ands	r3, r1
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e034      	b.n	80015ea <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001588:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f245 5255 	movw	r2, #21845	; 0x5555
 8001592:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6852      	ldr	r2, [r2, #4]
 800159c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6892      	ldr	r2, [r2, #8]
 80015a6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80015a8:	f7ff fc6c 	bl	8000e84 <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015ae:	e00f      	b.n	80015d0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80015b0:	f7ff fc68 	bl	8000e84 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b27      	cmp	r3, #39	; 0x27
 80015bc:	d908      	bls.n	80015d0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e00c      	b.n	80015ea <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1e8      	bne.n	80015b0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80015e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001602:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e26c      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8087 	beq.w	800173e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001630:	4b92      	ldr	r3, [pc, #584]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b04      	cmp	r3, #4
 800163a:	d00c      	beq.n	8001656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800163c:	4b8f      	ldr	r3, [pc, #572]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d112      	bne.n	800166e <HAL_RCC_OscConfig+0x5e>
 8001648:	4b8c      	ldr	r3, [pc, #560]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001654:	d10b      	bne.n	800166e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06c      	beq.n	800173c <HAL_RCC_OscConfig+0x12c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d168      	bne.n	800173c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e246      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x76>
 8001678:	4b80      	ldr	r3, [pc, #512]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a7f      	ldr	r2, [pc, #508]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e02e      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x98>
 800168e:	4b7b      	ldr	r3, [pc, #492]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7a      	ldr	r2, [pc, #488]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b78      	ldr	r3, [pc, #480]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a77      	ldr	r2, [pc, #476]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0xbc>
 80016b2:	4b72      	ldr	r3, [pc, #456]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a71      	ldr	r2, [pc, #452]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b6f      	ldr	r3, [pc, #444]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6e      	ldr	r2, [pc, #440]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 80016cc:	4b6b      	ldr	r3, [pc, #428]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6a      	ldr	r2, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a67      	ldr	r2, [pc, #412]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fbca 	bl	8000e84 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fbc6 	bl	8000e84 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1fa      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b5d      	ldr	r3, [pc, #372]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe4>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fbb6 	bl	8000e84 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fbb2 	bl	8000e84 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1e6      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x10c>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174a:	4b4c      	ldr	r3, [pc, #304]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001756:	4b49      	ldr	r3, [pc, #292]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b08      	cmp	r3, #8
 8001760:	d11c      	bne.n	800179c <HAL_RCC_OscConfig+0x18c>
 8001762:	4b46      	ldr	r3, [pc, #280]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b43      	ldr	r3, [pc, #268]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x176>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1ba      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4939      	ldr	r1, [pc, #228]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e03a      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b36      	ldr	r3, [pc, #216]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb6b 	bl	8000e84 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fb67 	bl	8000e84 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e19b      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4927      	ldr	r1, [pc, #156]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb4a 	bl	8000e84 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fb46 	bl	8000e84 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e17a      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d03a      	beq.n	8001894 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d019      	beq.n	800185a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fb2a 	bl	8000e84 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fb26 	bl	8000e84 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e15a      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_RCC_OscConfig+0x26c>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 facc 	bl	8001df0 <RCC_Delay>
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fb10 	bl	8000e84 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001866:	e00f      	b.n	8001888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fb0c 	bl	8000e84 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d908      	bls.n	8001888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e140      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	42420000 	.word	0x42420000
 8001884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	4b9e      	ldr	r3, [pc, #632]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e9      	bne.n	8001868 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a6 	beq.w	80019ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a6:	4b97      	ldr	r3, [pc, #604]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10d      	bne.n	80018ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a93      	ldr	r2, [pc, #588]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ca:	2301      	movs	r3, #1
 80018cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b8e      	ldr	r3, [pc, #568]	; (8001b08 <HAL_RCC_OscConfig+0x4f8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018da:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a8a      	ldr	r2, [pc, #552]	; (8001b08 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e6:	f7ff facd 	bl	8000e84 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ee:	f7ff fac9 	bl	8000e84 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b64      	cmp	r3, #100	; 0x64
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0fd      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <HAL_RCC_OscConfig+0x4f8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x312>
 8001914:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a7a      	ldr	r2, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	e02d      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x334>
 800192a:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a75      	ldr	r2, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6213      	str	r3, [r2, #32]
 8001936:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	e01c      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b05      	cmp	r3, #5
 800194a:	d10c      	bne.n	8001966 <HAL_RCC_OscConfig+0x356>
 800194c:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4a6c      	ldr	r2, [pc, #432]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6213      	str	r3, [r2, #32]
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a69      	ldr	r2, [pc, #420]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	e00b      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a66      	ldr	r2, [pc, #408]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	4b64      	ldr	r3, [pc, #400]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fa7d 	bl	8000e84 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fa79 	bl	8000e84 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0ab      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ee      	beq.n	800198e <HAL_RCC_OscConfig+0x37e>
 80019b0:	e014      	b.n	80019dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa67 	bl	8000e84 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fa63 	bl	8000e84 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e095      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ee      	bne.n	80019ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d105      	bne.n	80019ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e2:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a47      	ldr	r2, [pc, #284]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8081 	beq.w	8001afa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d061      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d146      	bne.n	8001a9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCC_OscConfig+0x4fc>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa37 	bl	8000e84 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff fa33 	bl	8000e84 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e067      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d108      	bne.n	8001a54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a42:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	492d      	ldr	r1, [pc, #180]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a19      	ldr	r1, [r3, #32]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	430b      	orrs	r3, r1
 8001a66:	4927      	ldr	r1, [pc, #156]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_RCC_OscConfig+0x4fc>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa07 	bl	8000e84 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff fa03 	bl	8000e84 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e037      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x46a>
 8001a98:	e02f      	b.n	8001afa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_RCC_OscConfig+0x4fc>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f9f0 	bl	8000e84 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f9ec 	bl	8000e84 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e020      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x498>
 8001ac6:	e018      	b.n	8001afa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e013      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	42420060 	.word	0x42420060

08001b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0d0      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4b6a      	ldr	r3, [pc, #424]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d910      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0207 	bic.w	r2, r3, #7
 8001b3a:	4965      	ldr	r1, [pc, #404]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0b8      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	494d      	ldr	r1, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d040      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d115      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e07f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e073      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e06b      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4936      	ldr	r1, [pc, #216]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c00:	f7ff f940 	bl	8000e84 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7ff f93c 	bl	8000e84 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e053      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d210      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 0207 	bic.w	r2, r3, #7
 8001c46:	4922      	ldr	r1, [pc, #136]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e032      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4916      	ldr	r1, [pc, #88]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c9e:	f000 f821 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb0:	5ccb      	ldrb	r3, [r1, r3]
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1cc>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f89e 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	080041f8 	.word	0x080041f8
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d002      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x30>
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d003      	beq.n	8001d1a <HAL_RCC_GetSysClockFreq+0x36>
 8001d12:	e027      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d16:	613b      	str	r3, [r7, #16]
      break;
 8001d18:	e027      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0c9b      	lsrs	r3, r3, #18
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d010      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	0c5b      	lsrs	r3, r3, #17
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d46:	fb02 f203 	mul.w	r2, r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e004      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	613b      	str	r3, [r7, #16]
      break;
 8001d62:	e002      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d66:	613b      	str	r3, [r7, #16]
      break;
 8001d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6a:	693b      	ldr	r3, [r7, #16]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	007a1200 	.word	0x007a1200
 8001d80:	08004210 	.word	0x08004210
 8001d84:	08004220 	.word	0x08004220
 8001d88:	003d0900 	.word	0x003d0900

08001d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da4:	f7ff fff2 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08004208 	.word	0x08004208

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08004208 	.word	0x08004208

08001df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <RCC_Delay+0x34>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <RCC_Delay+0x38>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0a5b      	lsrs	r3, r3, #9
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e0c:	bf00      	nop
  }
  while (Delay --);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <RCC_Delay+0x1c>
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000000 	.word	0x20000000
 8001e28:	10624dd3 	.word	0x10624dd3

08001e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e041      	b.n	8001ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fdd6 	bl	8000a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f000 fa6e 	bl	800234c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d001      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e035      	b.n	8001f50 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a16      	ldr	r2, [pc, #88]	; (8001f5c <HAL_TIM_Base_Start_IT+0x90>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d009      	beq.n	8001f1a <HAL_TIM_Base_Start_IT+0x4e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d004      	beq.n	8001f1a <HAL_TIM_Base_Start_IT+0x4e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_TIM_Base_Start_IT+0x94>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d111      	bne.n	8001f3e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d010      	beq.n	8001f4e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3c:	e007      	b.n	8001f4e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40000400 	.word	0x40000400

08001f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d122      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d11b      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0202 	mvn.w	r2, #2
 8001f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f9b4 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f9a7 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f9b6 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d122      	bne.n	8002014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d11b      	bne.n	8002014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0204 	mvn.w	r2, #4
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f98a 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f97d 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f98c 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b08      	cmp	r3, #8
 8002020:	d122      	bne.n	8002068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b08      	cmp	r3, #8
 800202e:	d11b      	bne.n	8002068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0208 	mvn.w	r2, #8
 8002038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2204      	movs	r2, #4
 800203e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f960 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f953 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f962 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b10      	cmp	r3, #16
 8002074:	d122      	bne.n	80020bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b10      	cmp	r3, #16
 8002082:	d11b      	bne.n	80020bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0210 	mvn.w	r2, #16
 800208c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2208      	movs	r2, #8
 8002092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f936 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 80020a8:	e005      	b.n	80020b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f929 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f938 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0201 	mvn.w	r2, #1
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe f996 	bl	8000414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	2b80      	cmp	r3, #128	; 0x80
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa6b 	bl	80025ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b40      	cmp	r3, #64	; 0x40
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8fc 	bl	8002338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b20      	cmp	r3, #32
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b20      	cmp	r3, #32
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0220 	mvn.w	r2, #32
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa36 	bl	80025d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_TIM_ConfigClockSource+0x1c>
 800218c:	2302      	movs	r3, #2
 800218e:	e0b4      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x186>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c8:	d03e      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xd4>
 80021ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ce:	f200 8087 	bhi.w	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d6:	f000 8086 	beq.w	80022e6 <HAL_TIM_ConfigClockSource+0x172>
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	d87f      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021e0:	2b70      	cmp	r3, #112	; 0x70
 80021e2:	d01a      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xa6>
 80021e4:	2b70      	cmp	r3, #112	; 0x70
 80021e6:	d87b      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021e8:	2b60      	cmp	r3, #96	; 0x60
 80021ea:	d050      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x11a>
 80021ec:	2b60      	cmp	r3, #96	; 0x60
 80021ee:	d877      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021f0:	2b50      	cmp	r3, #80	; 0x50
 80021f2:	d03c      	beq.n	800226e <HAL_TIM_ConfigClockSource+0xfa>
 80021f4:	2b50      	cmp	r3, #80	; 0x50
 80021f6:	d873      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d058      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x13a>
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d86f      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002200:	2b30      	cmp	r3, #48	; 0x30
 8002202:	d064      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x15a>
 8002204:	2b30      	cmp	r3, #48	; 0x30
 8002206:	d86b      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002208:	2b20      	cmp	r3, #32
 800220a:	d060      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x15a>
 800220c:	2b20      	cmp	r3, #32
 800220e:	d867      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d05c      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x15a>
 8002214:	2b10      	cmp	r3, #16
 8002216:	d05a      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x15a>
 8002218:	e062      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f000 f95e 	bl	80024ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800223c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	609a      	str	r2, [r3, #8]
      break;
 8002246:	e04f      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f000 f947 	bl	80024ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800226a:	609a      	str	r2, [r3, #8]
      break;
 800226c:	e03c      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	461a      	mov	r2, r3
 800227c:	f000 f8be 	bl	80023fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2150      	movs	r1, #80	; 0x50
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f915 	bl	80024b6 <TIM_ITRx_SetConfig>
      break;
 800228c:	e02c      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	461a      	mov	r2, r3
 800229c:	f000 f8dc 	bl	8002458 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2160      	movs	r1, #96	; 0x60
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f905 	bl	80024b6 <TIM_ITRx_SetConfig>
      break;
 80022ac:	e01c      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f000 f89e 	bl	80023fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2140      	movs	r1, #64	; 0x40
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f8f5 	bl	80024b6 <TIM_ITRx_SetConfig>
      break;
 80022cc:	e00c      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f000 f8ec 	bl	80024b6 <TIM_ITRx_SetConfig>
      break;
 80022de:	e003      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
      break;
 80022e4:	e000      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
	...

0800234c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <TIM_Base_SetConfig+0xa8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <TIM_Base_SetConfig+0x28>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d003      	beq.n	8002374 <TIM_Base_SetConfig+0x28>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <TIM_Base_SetConfig+0xac>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d108      	bne.n	8002386 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <TIM_Base_SetConfig+0xa8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0x52>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0x52>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <TIM_Base_SetConfig+0xac>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d108      	bne.n	80023b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <TIM_Base_SetConfig+0xa8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d103      	bne.n	80023e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	615a      	str	r2, [r3, #20]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40000400 	.word	0x40000400

080023fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f023 0201 	bic.w	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f023 030a 	bic.w	r3, r3, #10
 8002438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	621a      	str	r2, [r3, #32]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	f023 0210 	bic.w	r2, r3, #16
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	031b      	lsls	r3, r3, #12
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002494:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	621a      	str	r2, [r3, #32]
}
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f043 0307 	orr.w	r3, r3, #7
 80024d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b087      	sub	sp, #28
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	021a      	lsls	r2, r3, #8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	431a      	orrs	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4313      	orrs	r3, r2
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	609a      	str	r2, [r3, #8]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800253c:	2302      	movs	r3, #2
 800253e:	e041      	b.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d004      	beq.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10c      	bne.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40000400 	.word	0x40000400

080025d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e042      	b.n	8002694 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fa12 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800263e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fd71 	bl	8003128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d16d      	bne.n	8002798 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_UART_Transmit+0x2c>
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e066      	b.n	800279a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2221      	movs	r2, #33	; 0x21
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026da:	f7fe fbd3 	bl	8000e84 <HAL_GetTick>
 80026de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	88fa      	ldrh	r2, [r7, #6]
 80026e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	88fa      	ldrh	r2, [r7, #6]
 80026ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f4:	d108      	bne.n	8002708 <HAL_UART_Transmit+0x6c>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d104      	bne.n	8002708 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e003      	b.n	8002710 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002710:	e02a      	b.n	8002768 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 faf9 	bl	8002d14 <UART_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e036      	b.n	800279a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	3302      	adds	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	e007      	b.n	800275a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3301      	adds	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1cf      	bne.n	8002712 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fac9 	bl	8002d14 <UART_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e006      	b.n	800279a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0ba      	sub	sp, #232	; 0xe8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10f      	bne.n	800280a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_UART_IRQHandler+0x66>
 80027f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fbd1 	bl	8002faa <UART_Receive_IT>
      return;
 8002808:	e25b      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800280a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80de 	beq.w	80029d0 <HAL_UART_IRQHandler+0x22c>
 8002814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002824:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80d1 	beq.w	80029d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_UART_IRQHandler+0xae>
 800283a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_UART_IRQHandler+0xd2>
 800285e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_UART_IRQHandler+0xf6>
 8002882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f043 0204 	orr.w	r2, r3, #4
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d011      	beq.n	80028ca <HAL_UART_IRQHandler+0x126>
 80028a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f043 0208 	orr.w	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 81f2 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_UART_IRQHandler+0x14e>
 80028e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fb5c 	bl	8002faa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <HAL_UART_IRQHandler+0x17a>
 8002916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04f      	beq.n	80029be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa66 	bl	8002df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d041      	beq.n	80029b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3314      	adds	r3, #20
 8002938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800294c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3314      	adds	r3, #20
 800295a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800295e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800296a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1d9      	bne.n	8002932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d013      	beq.n	80029ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_UART_IRQHandler+0x3e0>)
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fbc8 	bl	8001128 <HAL_DMA_Abort_IT>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029a8:	4610      	mov	r0, r2
 80029aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	e00e      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f99c 	bl	8002cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	e00a      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f998 	bl	8002cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	e006      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f994 	bl	8002cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029ca:	e175      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	bf00      	nop
    return;
 80029ce:	e173      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 814f 	bne.w	8002c78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8148 	beq.w	8002c78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8141 	beq.w	8002c78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80b6 	beq.w	8002b88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8145 	beq.w	8002cbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	f080 813e 	bcs.w	8002cbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	f000 8088 	beq.w	8002b64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a62:	e853 3f00 	ldrex	r3, [r3]
 8002a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1d9      	bne.n	8002a54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ac4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ad0:	e841 2300 	strex	r3, r2, [r1]
 8002ad4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e1      	bne.n	8002aa0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b08:	e841 2300 	strex	r3, r2, [r1]
 8002b0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e3      	bne.n	8002adc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b34:	f023 0310 	bic.w	r3, r3, #16
 8002b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b46:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1e3      	bne.n	8002b22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe faa7 	bl	80010b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8bf 	bl	8002cfe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b80:	e09c      	b.n	8002cbc <HAL_UART_IRQHandler+0x518>
 8002b82:	bf00      	nop
 8002b84:	08002eb5 	.word	0x08002eb5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 808e 	beq.w	8002cc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8089 	beq.w	8002cc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bd2:	647a      	str	r2, [r7, #68]	; 0x44
 8002bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e3      	bne.n	8002bae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3314      	adds	r3, #20
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e3      	bne.n	8002be6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0310 	bic.w	r3, r3, #16
 8002c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c50:	61fa      	str	r2, [r7, #28]
 8002c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c54:	69b9      	ldr	r1, [r7, #24]
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	e841 2300 	strex	r3, r2, [r1]
 8002c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e3      	bne.n	8002c2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f844 	bl	8002cfe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c76:	e023      	b.n	8002cc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_UART_IRQHandler+0x4f4>
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f923 	bl	8002edc <UART_Transmit_IT>
    return;
 8002c96:	e014      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f962 	bl	8002f7a <UART_EndTransmit_IT>
    return;
 8002cb6:	e004      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002cb8:	bf00      	nop
 8002cba:	e002      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cbc:	bf00      	nop
 8002cbe:	e000      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cc0:	bf00      	nop
  }
}
 8002cc2:	37e8      	adds	r7, #232	; 0xe8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b090      	sub	sp, #64	; 0x40
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d24:	e050      	b.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d04c      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d34:	f7fe f8a6 	bl	8000e84 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d241      	bcs.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d64:	637a      	str	r2, [r7, #52]	; 0x34
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	613b      	str	r3, [r7, #16]
   return(result);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3314      	adds	r3, #20
 8002d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d98:	623a      	str	r2, [r7, #32]
 8002d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	69f9      	ldr	r1, [r7, #28]
 8002d9e:	6a3a      	ldr	r2, [r7, #32]
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e00f      	b.n	8002de8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d09f      	beq.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3740      	adds	r7, #64	; 0x40
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b095      	sub	sp, #84	; 0x54
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e18:	643a      	str	r2, [r7, #64]	; 0x40
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e5      	bne.n	8002e2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d119      	bne.n	8002e9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f023 0310 	bic.w	r3, r3, #16
 8002e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e88:	61ba      	str	r2, [r7, #24]
 8002e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	6979      	ldr	r1, [r7, #20]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	613b      	str	r3, [r7, #16]
   return(result);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002eaa:	bf00      	nop
 8002eac:	3754      	adds	r7, #84	; 0x54
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff ff0c 	bl	8002cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b21      	cmp	r3, #33	; 0x21
 8002eee:	d13e      	bne.n	8002f6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d114      	bne.n	8002f24 <UART_Transmit_IT+0x48>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d110      	bne.n	8002f24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	621a      	str	r2, [r3, #32]
 8002f22:	e008      	b.n	8002f36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	1c59      	adds	r1, r3, #1
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6211      	str	r1, [r2, #32]
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4619      	mov	r1, r3
 8002f44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fe94 	bl	8002cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08c      	sub	sp, #48	; 0x30
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b22      	cmp	r3, #34	; 0x22
 8002fbc:	f040 80ae 	bne.w	800311c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc8:	d117      	bne.n	8002ffa <UART_Receive_IT+0x50>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d113      	bne.n	8002ffa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	1c9a      	adds	r2, r3, #2
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff8:	e026      	b.n	8003048 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003000:	2300      	movs	r3, #0
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d007      	beq.n	800301e <UART_Receive_IT+0x74>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <UART_Receive_IT+0x82>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e008      	b.n	800303e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003038:	b2da      	uxtb	r2, r3
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29b      	uxth	r3, r3
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4619      	mov	r1, r3
 8003056:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003058:	2b00      	cmp	r3, #0
 800305a:	d15d      	bne.n	8003118 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0220 	bic.w	r2, r2, #32
 800306a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800307a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d135      	bne.n	800310e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	613b      	str	r3, [r7, #16]
   return(result);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	623a      	str	r2, [r7, #32]
 80030ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	69f9      	ldr	r1, [r7, #28]
 80030ce:	6a3a      	ldr	r2, [r7, #32]
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d10a      	bne.n	8003100 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fdf9 	bl	8002cfe <HAL_UARTEx_RxEventCallback>
 800310c:	e002      	b.n	8003114 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fde3 	bl	8002cda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e002      	b.n	800311e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3730      	adds	r7, #48	; 0x30
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003162:	f023 030c 	bic.w	r3, r3, #12
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	430b      	orrs	r3, r1
 800316e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <UART_SetConfig+0x114>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d103      	bne.n	8003198 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7fe fe1a 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	e002      	b.n	800319e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003198:	f7fe fe02 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 800319c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009a      	lsls	r2, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	4a22      	ldr	r2, [pc, #136]	; (8003240 <UART_SetConfig+0x118>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	0119      	lsls	r1, r3, #4
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009a      	lsls	r2, r3, #2
 80031c8:	441a      	add	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <UART_SetConfig+0x118>)
 80031d6:	fba3 0302 	umull	r0, r3, r3, r2
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2064      	movs	r0, #100	; 0x64
 80031de:	fb00 f303 	mul.w	r3, r0, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	3332      	adds	r3, #50	; 0x32
 80031e8:	4a15      	ldr	r2, [pc, #84]	; (8003240 <UART_SetConfig+0x118>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f4:	4419      	add	r1, r3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	009a      	lsls	r2, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	fbb2 f2f3 	udiv	r2, r2, r3
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <UART_SetConfig+0x118>)
 800320e:	fba3 0302 	umull	r0, r3, r3, r2
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2064      	movs	r0, #100	; 0x64
 8003216:	fb00 f303 	mul.w	r3, r0, r3
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	3332      	adds	r3, #50	; 0x32
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <UART_SetConfig+0x118>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	f003 020f 	and.w	r2, r3, #15
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	440a      	add	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40013800 	.word	0x40013800
 8003240:	51eb851f 	.word	0x51eb851f

08003244 <__errno>:
 8003244:	4b01      	ldr	r3, [pc, #4]	; (800324c <__errno+0x8>)
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	2000000c 	.word	0x2000000c

08003250 <__libc_init_array>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	2600      	movs	r6, #0
 8003254:	4d0c      	ldr	r5, [pc, #48]	; (8003288 <__libc_init_array+0x38>)
 8003256:	4c0d      	ldr	r4, [pc, #52]	; (800328c <__libc_init_array+0x3c>)
 8003258:	1b64      	subs	r4, r4, r5
 800325a:	10a4      	asrs	r4, r4, #2
 800325c:	42a6      	cmp	r6, r4
 800325e:	d109      	bne.n	8003274 <__libc_init_array+0x24>
 8003260:	f000 ff82 	bl	8004168 <_init>
 8003264:	2600      	movs	r6, #0
 8003266:	4d0a      	ldr	r5, [pc, #40]	; (8003290 <__libc_init_array+0x40>)
 8003268:	4c0a      	ldr	r4, [pc, #40]	; (8003294 <__libc_init_array+0x44>)
 800326a:	1b64      	subs	r4, r4, r5
 800326c:	10a4      	asrs	r4, r4, #2
 800326e:	42a6      	cmp	r6, r4
 8003270:	d105      	bne.n	800327e <__libc_init_array+0x2e>
 8003272:	bd70      	pop	{r4, r5, r6, pc}
 8003274:	f855 3b04 	ldr.w	r3, [r5], #4
 8003278:	4798      	blx	r3
 800327a:	3601      	adds	r6, #1
 800327c:	e7ee      	b.n	800325c <__libc_init_array+0xc>
 800327e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003282:	4798      	blx	r3
 8003284:	3601      	adds	r6, #1
 8003286:	e7f2      	b.n	800326e <__libc_init_array+0x1e>
 8003288:	080042bc 	.word	0x080042bc
 800328c:	080042bc 	.word	0x080042bc
 8003290:	080042bc 	.word	0x080042bc
 8003294:	080042c0 	.word	0x080042c0

08003298 <memset>:
 8003298:	4603      	mov	r3, r0
 800329a:	4402      	add	r2, r0
 800329c:	4293      	cmp	r3, r2
 800329e:	d100      	bne.n	80032a2 <memset+0xa>
 80032a0:	4770      	bx	lr
 80032a2:	f803 1b01 	strb.w	r1, [r3], #1
 80032a6:	e7f9      	b.n	800329c <memset+0x4>

080032a8 <iprintf>:
 80032a8:	b40f      	push	{r0, r1, r2, r3}
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <iprintf+0x2c>)
 80032ac:	b513      	push	{r0, r1, r4, lr}
 80032ae:	681c      	ldr	r4, [r3, #0]
 80032b0:	b124      	cbz	r4, 80032bc <iprintf+0x14>
 80032b2:	69a3      	ldr	r3, [r4, #24]
 80032b4:	b913      	cbnz	r3, 80032bc <iprintf+0x14>
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 f866 	bl	8003388 <__sinit>
 80032bc:	ab05      	add	r3, sp, #20
 80032be:	4620      	mov	r0, r4
 80032c0:	9a04      	ldr	r2, [sp, #16]
 80032c2:	68a1      	ldr	r1, [r4, #8]
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	f000 f981 	bl	80035cc <_vfiprintf_r>
 80032ca:	b002      	add	sp, #8
 80032cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d0:	b004      	add	sp, #16
 80032d2:	4770      	bx	lr
 80032d4:	2000000c 	.word	0x2000000c

080032d8 <std>:
 80032d8:	2300      	movs	r3, #0
 80032da:	b510      	push	{r4, lr}
 80032dc:	4604      	mov	r4, r0
 80032de:	e9c0 3300 	strd	r3, r3, [r0]
 80032e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032e6:	6083      	str	r3, [r0, #8]
 80032e8:	8181      	strh	r1, [r0, #12]
 80032ea:	6643      	str	r3, [r0, #100]	; 0x64
 80032ec:	81c2      	strh	r2, [r0, #14]
 80032ee:	6183      	str	r3, [r0, #24]
 80032f0:	4619      	mov	r1, r3
 80032f2:	2208      	movs	r2, #8
 80032f4:	305c      	adds	r0, #92	; 0x5c
 80032f6:	f7ff ffcf 	bl	8003298 <memset>
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <std+0x38>)
 80032fc:	6224      	str	r4, [r4, #32]
 80032fe:	6263      	str	r3, [r4, #36]	; 0x24
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <std+0x3c>)
 8003302:	62a3      	str	r3, [r4, #40]	; 0x28
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <std+0x40>)
 8003306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <std+0x44>)
 800330a:	6323      	str	r3, [r4, #48]	; 0x30
 800330c:	bd10      	pop	{r4, pc}
 800330e:	bf00      	nop
 8003310:	08003b79 	.word	0x08003b79
 8003314:	08003b9b 	.word	0x08003b9b
 8003318:	08003bd3 	.word	0x08003bd3
 800331c:	08003bf7 	.word	0x08003bf7

08003320 <_cleanup_r>:
 8003320:	4901      	ldr	r1, [pc, #4]	; (8003328 <_cleanup_r+0x8>)
 8003322:	f000 b8af 	b.w	8003484 <_fwalk_reent>
 8003326:	bf00      	nop
 8003328:	08003ed1 	.word	0x08003ed1

0800332c <__sfmoreglue>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	2568      	movs	r5, #104	; 0x68
 8003330:	1e4a      	subs	r2, r1, #1
 8003332:	4355      	muls	r5, r2
 8003334:	460e      	mov	r6, r1
 8003336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800333a:	f000 f8c5 	bl	80034c8 <_malloc_r>
 800333e:	4604      	mov	r4, r0
 8003340:	b140      	cbz	r0, 8003354 <__sfmoreglue+0x28>
 8003342:	2100      	movs	r1, #0
 8003344:	e9c0 1600 	strd	r1, r6, [r0]
 8003348:	300c      	adds	r0, #12
 800334a:	60a0      	str	r0, [r4, #8]
 800334c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003350:	f7ff ffa2 	bl	8003298 <memset>
 8003354:	4620      	mov	r0, r4
 8003356:	bd70      	pop	{r4, r5, r6, pc}

08003358 <__sfp_lock_acquire>:
 8003358:	4801      	ldr	r0, [pc, #4]	; (8003360 <__sfp_lock_acquire+0x8>)
 800335a:	f000 b8b3 	b.w	80034c4 <__retarget_lock_acquire_recursive>
 800335e:	bf00      	nop
 8003360:	20000478 	.word	0x20000478

08003364 <__sfp_lock_release>:
 8003364:	4801      	ldr	r0, [pc, #4]	; (800336c <__sfp_lock_release+0x8>)
 8003366:	f000 b8ae 	b.w	80034c6 <__retarget_lock_release_recursive>
 800336a:	bf00      	nop
 800336c:	20000478 	.word	0x20000478

08003370 <__sinit_lock_acquire>:
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <__sinit_lock_acquire+0x8>)
 8003372:	f000 b8a7 	b.w	80034c4 <__retarget_lock_acquire_recursive>
 8003376:	bf00      	nop
 8003378:	20000473 	.word	0x20000473

0800337c <__sinit_lock_release>:
 800337c:	4801      	ldr	r0, [pc, #4]	; (8003384 <__sinit_lock_release+0x8>)
 800337e:	f000 b8a2 	b.w	80034c6 <__retarget_lock_release_recursive>
 8003382:	bf00      	nop
 8003384:	20000473 	.word	0x20000473

08003388 <__sinit>:
 8003388:	b510      	push	{r4, lr}
 800338a:	4604      	mov	r4, r0
 800338c:	f7ff fff0 	bl	8003370 <__sinit_lock_acquire>
 8003390:	69a3      	ldr	r3, [r4, #24]
 8003392:	b11b      	cbz	r3, 800339c <__sinit+0x14>
 8003394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003398:	f7ff bff0 	b.w	800337c <__sinit_lock_release>
 800339c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033a0:	6523      	str	r3, [r4, #80]	; 0x50
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <__sinit+0x68>)
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <__sinit+0x6c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	bf08      	it	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	4620      	mov	r0, r4
 80033b2:	bf08      	it	eq
 80033b4:	61a3      	streq	r3, [r4, #24]
 80033b6:	f000 f81f 	bl	80033f8 <__sfp>
 80033ba:	6060      	str	r0, [r4, #4]
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 f81b 	bl	80033f8 <__sfp>
 80033c2:	60a0      	str	r0, [r4, #8]
 80033c4:	4620      	mov	r0, r4
 80033c6:	f000 f817 	bl	80033f8 <__sfp>
 80033ca:	2200      	movs	r2, #0
 80033cc:	2104      	movs	r1, #4
 80033ce:	60e0      	str	r0, [r4, #12]
 80033d0:	6860      	ldr	r0, [r4, #4]
 80033d2:	f7ff ff81 	bl	80032d8 <std>
 80033d6:	2201      	movs	r2, #1
 80033d8:	2109      	movs	r1, #9
 80033da:	68a0      	ldr	r0, [r4, #8]
 80033dc:	f7ff ff7c 	bl	80032d8 <std>
 80033e0:	2202      	movs	r2, #2
 80033e2:	2112      	movs	r1, #18
 80033e4:	68e0      	ldr	r0, [r4, #12]
 80033e6:	f7ff ff77 	bl	80032d8 <std>
 80033ea:	2301      	movs	r3, #1
 80033ec:	61a3      	str	r3, [r4, #24]
 80033ee:	e7d1      	b.n	8003394 <__sinit+0xc>
 80033f0:	08004224 	.word	0x08004224
 80033f4:	08003321 	.word	0x08003321

080033f8 <__sfp>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	4607      	mov	r7, r0
 80033fc:	f7ff ffac 	bl	8003358 <__sfp_lock_acquire>
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <__sfp+0x84>)
 8003402:	681e      	ldr	r6, [r3, #0]
 8003404:	69b3      	ldr	r3, [r6, #24]
 8003406:	b913      	cbnz	r3, 800340e <__sfp+0x16>
 8003408:	4630      	mov	r0, r6
 800340a:	f7ff ffbd 	bl	8003388 <__sinit>
 800340e:	3648      	adds	r6, #72	; 0x48
 8003410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003414:	3b01      	subs	r3, #1
 8003416:	d503      	bpl.n	8003420 <__sfp+0x28>
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	b30b      	cbz	r3, 8003460 <__sfp+0x68>
 800341c:	6836      	ldr	r6, [r6, #0]
 800341e:	e7f7      	b.n	8003410 <__sfp+0x18>
 8003420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003424:	b9d5      	cbnz	r5, 800345c <__sfp+0x64>
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <__sfp+0x88>)
 8003428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800342c:	60e3      	str	r3, [r4, #12]
 800342e:	6665      	str	r5, [r4, #100]	; 0x64
 8003430:	f000 f847 	bl	80034c2 <__retarget_lock_init_recursive>
 8003434:	f7ff ff96 	bl	8003364 <__sfp_lock_release>
 8003438:	2208      	movs	r2, #8
 800343a:	4629      	mov	r1, r5
 800343c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003444:	6025      	str	r5, [r4, #0]
 8003446:	61a5      	str	r5, [r4, #24]
 8003448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800344c:	f7ff ff24 	bl	8003298 <memset>
 8003450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003458:	4620      	mov	r0, r4
 800345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800345c:	3468      	adds	r4, #104	; 0x68
 800345e:	e7d9      	b.n	8003414 <__sfp+0x1c>
 8003460:	2104      	movs	r1, #4
 8003462:	4638      	mov	r0, r7
 8003464:	f7ff ff62 	bl	800332c <__sfmoreglue>
 8003468:	4604      	mov	r4, r0
 800346a:	6030      	str	r0, [r6, #0]
 800346c:	2800      	cmp	r0, #0
 800346e:	d1d5      	bne.n	800341c <__sfp+0x24>
 8003470:	f7ff ff78 	bl	8003364 <__sfp_lock_release>
 8003474:	230c      	movs	r3, #12
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	e7ee      	b.n	8003458 <__sfp+0x60>
 800347a:	bf00      	nop
 800347c:	08004224 	.word	0x08004224
 8003480:	ffff0001 	.word	0xffff0001

08003484 <_fwalk_reent>:
 8003484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003488:	4606      	mov	r6, r0
 800348a:	4688      	mov	r8, r1
 800348c:	2700      	movs	r7, #0
 800348e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003496:	f1b9 0901 	subs.w	r9, r9, #1
 800349a:	d505      	bpl.n	80034a8 <_fwalk_reent+0x24>
 800349c:	6824      	ldr	r4, [r4, #0]
 800349e:	2c00      	cmp	r4, #0
 80034a0:	d1f7      	bne.n	8003492 <_fwalk_reent+0xe>
 80034a2:	4638      	mov	r0, r7
 80034a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034a8:	89ab      	ldrh	r3, [r5, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d907      	bls.n	80034be <_fwalk_reent+0x3a>
 80034ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034b2:	3301      	adds	r3, #1
 80034b4:	d003      	beq.n	80034be <_fwalk_reent+0x3a>
 80034b6:	4629      	mov	r1, r5
 80034b8:	4630      	mov	r0, r6
 80034ba:	47c0      	blx	r8
 80034bc:	4307      	orrs	r7, r0
 80034be:	3568      	adds	r5, #104	; 0x68
 80034c0:	e7e9      	b.n	8003496 <_fwalk_reent+0x12>

080034c2 <__retarget_lock_init_recursive>:
 80034c2:	4770      	bx	lr

080034c4 <__retarget_lock_acquire_recursive>:
 80034c4:	4770      	bx	lr

080034c6 <__retarget_lock_release_recursive>:
 80034c6:	4770      	bx	lr

080034c8 <_malloc_r>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	1ccd      	adds	r5, r1, #3
 80034cc:	f025 0503 	bic.w	r5, r5, #3
 80034d0:	3508      	adds	r5, #8
 80034d2:	2d0c      	cmp	r5, #12
 80034d4:	bf38      	it	cc
 80034d6:	250c      	movcc	r5, #12
 80034d8:	2d00      	cmp	r5, #0
 80034da:	4606      	mov	r6, r0
 80034dc:	db01      	blt.n	80034e2 <_malloc_r+0x1a>
 80034de:	42a9      	cmp	r1, r5
 80034e0:	d903      	bls.n	80034ea <_malloc_r+0x22>
 80034e2:	230c      	movs	r3, #12
 80034e4:	6033      	str	r3, [r6, #0]
 80034e6:	2000      	movs	r0, #0
 80034e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ea:	f000 fdb1 	bl	8004050 <__malloc_lock>
 80034ee:	4921      	ldr	r1, [pc, #132]	; (8003574 <_malloc_r+0xac>)
 80034f0:	680a      	ldr	r2, [r1, #0]
 80034f2:	4614      	mov	r4, r2
 80034f4:	b99c      	cbnz	r4, 800351e <_malloc_r+0x56>
 80034f6:	4f20      	ldr	r7, [pc, #128]	; (8003578 <_malloc_r+0xb0>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b923      	cbnz	r3, 8003506 <_malloc_r+0x3e>
 80034fc:	4621      	mov	r1, r4
 80034fe:	4630      	mov	r0, r6
 8003500:	f000 fb2a 	bl	8003b58 <_sbrk_r>
 8003504:	6038      	str	r0, [r7, #0]
 8003506:	4629      	mov	r1, r5
 8003508:	4630      	mov	r0, r6
 800350a:	f000 fb25 	bl	8003b58 <_sbrk_r>
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	d123      	bne.n	800355a <_malloc_r+0x92>
 8003512:	230c      	movs	r3, #12
 8003514:	4630      	mov	r0, r6
 8003516:	6033      	str	r3, [r6, #0]
 8003518:	f000 fda0 	bl	800405c <__malloc_unlock>
 800351c:	e7e3      	b.n	80034e6 <_malloc_r+0x1e>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	1b5b      	subs	r3, r3, r5
 8003522:	d417      	bmi.n	8003554 <_malloc_r+0x8c>
 8003524:	2b0b      	cmp	r3, #11
 8003526:	d903      	bls.n	8003530 <_malloc_r+0x68>
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	441c      	add	r4, r3
 800352c:	6025      	str	r5, [r4, #0]
 800352e:	e004      	b.n	800353a <_malloc_r+0x72>
 8003530:	6863      	ldr	r3, [r4, #4]
 8003532:	42a2      	cmp	r2, r4
 8003534:	bf0c      	ite	eq
 8003536:	600b      	streq	r3, [r1, #0]
 8003538:	6053      	strne	r3, [r2, #4]
 800353a:	4630      	mov	r0, r6
 800353c:	f000 fd8e 	bl	800405c <__malloc_unlock>
 8003540:	f104 000b 	add.w	r0, r4, #11
 8003544:	1d23      	adds	r3, r4, #4
 8003546:	f020 0007 	bic.w	r0, r0, #7
 800354a:	1ac2      	subs	r2, r0, r3
 800354c:	d0cc      	beq.n	80034e8 <_malloc_r+0x20>
 800354e:	1a1b      	subs	r3, r3, r0
 8003550:	50a3      	str	r3, [r4, r2]
 8003552:	e7c9      	b.n	80034e8 <_malloc_r+0x20>
 8003554:	4622      	mov	r2, r4
 8003556:	6864      	ldr	r4, [r4, #4]
 8003558:	e7cc      	b.n	80034f4 <_malloc_r+0x2c>
 800355a:	1cc4      	adds	r4, r0, #3
 800355c:	f024 0403 	bic.w	r4, r4, #3
 8003560:	42a0      	cmp	r0, r4
 8003562:	d0e3      	beq.n	800352c <_malloc_r+0x64>
 8003564:	1a21      	subs	r1, r4, r0
 8003566:	4630      	mov	r0, r6
 8003568:	f000 faf6 	bl	8003b58 <_sbrk_r>
 800356c:	3001      	adds	r0, #1
 800356e:	d1dd      	bne.n	800352c <_malloc_r+0x64>
 8003570:	e7cf      	b.n	8003512 <_malloc_r+0x4a>
 8003572:	bf00      	nop
 8003574:	200000a8 	.word	0x200000a8
 8003578:	200000ac 	.word	0x200000ac

0800357c <__sfputc_r>:
 800357c:	6893      	ldr	r3, [r2, #8]
 800357e:	b410      	push	{r4}
 8003580:	3b01      	subs	r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	6093      	str	r3, [r2, #8]
 8003586:	da07      	bge.n	8003598 <__sfputc_r+0x1c>
 8003588:	6994      	ldr	r4, [r2, #24]
 800358a:	42a3      	cmp	r3, r4
 800358c:	db01      	blt.n	8003592 <__sfputc_r+0x16>
 800358e:	290a      	cmp	r1, #10
 8003590:	d102      	bne.n	8003598 <__sfputc_r+0x1c>
 8003592:	bc10      	pop	{r4}
 8003594:	f000 bb34 	b.w	8003c00 <__swbuf_r>
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	1c58      	adds	r0, r3, #1
 800359c:	6010      	str	r0, [r2, #0]
 800359e:	7019      	strb	r1, [r3, #0]
 80035a0:	4608      	mov	r0, r1
 80035a2:	bc10      	pop	{r4}
 80035a4:	4770      	bx	lr

080035a6 <__sfputs_r>:
 80035a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a8:	4606      	mov	r6, r0
 80035aa:	460f      	mov	r7, r1
 80035ac:	4614      	mov	r4, r2
 80035ae:	18d5      	adds	r5, r2, r3
 80035b0:	42ac      	cmp	r4, r5
 80035b2:	d101      	bne.n	80035b8 <__sfputs_r+0x12>
 80035b4:	2000      	movs	r0, #0
 80035b6:	e007      	b.n	80035c8 <__sfputs_r+0x22>
 80035b8:	463a      	mov	r2, r7
 80035ba:	4630      	mov	r0, r6
 80035bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035c0:	f7ff ffdc 	bl	800357c <__sfputc_r>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d1f3      	bne.n	80035b0 <__sfputs_r+0xa>
 80035c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035cc <_vfiprintf_r>:
 80035cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d0:	460d      	mov	r5, r1
 80035d2:	4614      	mov	r4, r2
 80035d4:	4698      	mov	r8, r3
 80035d6:	4606      	mov	r6, r0
 80035d8:	b09d      	sub	sp, #116	; 0x74
 80035da:	b118      	cbz	r0, 80035e4 <_vfiprintf_r+0x18>
 80035dc:	6983      	ldr	r3, [r0, #24]
 80035de:	b90b      	cbnz	r3, 80035e4 <_vfiprintf_r+0x18>
 80035e0:	f7ff fed2 	bl	8003388 <__sinit>
 80035e4:	4b89      	ldr	r3, [pc, #548]	; (800380c <_vfiprintf_r+0x240>)
 80035e6:	429d      	cmp	r5, r3
 80035e8:	d11b      	bne.n	8003622 <_vfiprintf_r+0x56>
 80035ea:	6875      	ldr	r5, [r6, #4]
 80035ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035ee:	07d9      	lsls	r1, r3, #31
 80035f0:	d405      	bmi.n	80035fe <_vfiprintf_r+0x32>
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	059a      	lsls	r2, r3, #22
 80035f6:	d402      	bmi.n	80035fe <_vfiprintf_r+0x32>
 80035f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035fa:	f7ff ff63 	bl	80034c4 <__retarget_lock_acquire_recursive>
 80035fe:	89ab      	ldrh	r3, [r5, #12]
 8003600:	071b      	lsls	r3, r3, #28
 8003602:	d501      	bpl.n	8003608 <_vfiprintf_r+0x3c>
 8003604:	692b      	ldr	r3, [r5, #16]
 8003606:	b9eb      	cbnz	r3, 8003644 <_vfiprintf_r+0x78>
 8003608:	4629      	mov	r1, r5
 800360a:	4630      	mov	r0, r6
 800360c:	f000 fb5c 	bl	8003cc8 <__swsetup_r>
 8003610:	b1c0      	cbz	r0, 8003644 <_vfiprintf_r+0x78>
 8003612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003614:	07dc      	lsls	r4, r3, #31
 8003616:	d50e      	bpl.n	8003636 <_vfiprintf_r+0x6a>
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	b01d      	add	sp, #116	; 0x74
 800361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003622:	4b7b      	ldr	r3, [pc, #492]	; (8003810 <_vfiprintf_r+0x244>)
 8003624:	429d      	cmp	r5, r3
 8003626:	d101      	bne.n	800362c <_vfiprintf_r+0x60>
 8003628:	68b5      	ldr	r5, [r6, #8]
 800362a:	e7df      	b.n	80035ec <_vfiprintf_r+0x20>
 800362c:	4b79      	ldr	r3, [pc, #484]	; (8003814 <_vfiprintf_r+0x248>)
 800362e:	429d      	cmp	r5, r3
 8003630:	bf08      	it	eq
 8003632:	68f5      	ldreq	r5, [r6, #12]
 8003634:	e7da      	b.n	80035ec <_vfiprintf_r+0x20>
 8003636:	89ab      	ldrh	r3, [r5, #12]
 8003638:	0598      	lsls	r0, r3, #22
 800363a:	d4ed      	bmi.n	8003618 <_vfiprintf_r+0x4c>
 800363c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800363e:	f7ff ff42 	bl	80034c6 <__retarget_lock_release_recursive>
 8003642:	e7e9      	b.n	8003618 <_vfiprintf_r+0x4c>
 8003644:	2300      	movs	r3, #0
 8003646:	9309      	str	r3, [sp, #36]	; 0x24
 8003648:	2320      	movs	r3, #32
 800364a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800364e:	2330      	movs	r3, #48	; 0x30
 8003650:	f04f 0901 	mov.w	r9, #1
 8003654:	f8cd 800c 	str.w	r8, [sp, #12]
 8003658:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003818 <_vfiprintf_r+0x24c>
 800365c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003660:	4623      	mov	r3, r4
 8003662:	469a      	mov	sl, r3
 8003664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003668:	b10a      	cbz	r2, 800366e <_vfiprintf_r+0xa2>
 800366a:	2a25      	cmp	r2, #37	; 0x25
 800366c:	d1f9      	bne.n	8003662 <_vfiprintf_r+0x96>
 800366e:	ebba 0b04 	subs.w	fp, sl, r4
 8003672:	d00b      	beq.n	800368c <_vfiprintf_r+0xc0>
 8003674:	465b      	mov	r3, fp
 8003676:	4622      	mov	r2, r4
 8003678:	4629      	mov	r1, r5
 800367a:	4630      	mov	r0, r6
 800367c:	f7ff ff93 	bl	80035a6 <__sfputs_r>
 8003680:	3001      	adds	r0, #1
 8003682:	f000 80aa 	beq.w	80037da <_vfiprintf_r+0x20e>
 8003686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003688:	445a      	add	r2, fp
 800368a:	9209      	str	r2, [sp, #36]	; 0x24
 800368c:	f89a 3000 	ldrb.w	r3, [sl]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a2 	beq.w	80037da <_vfiprintf_r+0x20e>
 8003696:	2300      	movs	r3, #0
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036a0:	f10a 0a01 	add.w	sl, sl, #1
 80036a4:	9304      	str	r3, [sp, #16]
 80036a6:	9307      	str	r3, [sp, #28]
 80036a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ac:	931a      	str	r3, [sp, #104]	; 0x68
 80036ae:	4654      	mov	r4, sl
 80036b0:	2205      	movs	r2, #5
 80036b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b6:	4858      	ldr	r0, [pc, #352]	; (8003818 <_vfiprintf_r+0x24c>)
 80036b8:	f000 fcbc 	bl	8004034 <memchr>
 80036bc:	9a04      	ldr	r2, [sp, #16]
 80036be:	b9d8      	cbnz	r0, 80036f8 <_vfiprintf_r+0x12c>
 80036c0:	06d1      	lsls	r1, r2, #27
 80036c2:	bf44      	itt	mi
 80036c4:	2320      	movmi	r3, #32
 80036c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ca:	0713      	lsls	r3, r2, #28
 80036cc:	bf44      	itt	mi
 80036ce:	232b      	movmi	r3, #43	; 0x2b
 80036d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036d4:	f89a 3000 	ldrb.w	r3, [sl]
 80036d8:	2b2a      	cmp	r3, #42	; 0x2a
 80036da:	d015      	beq.n	8003708 <_vfiprintf_r+0x13c>
 80036dc:	4654      	mov	r4, sl
 80036de:	2000      	movs	r0, #0
 80036e0:	f04f 0c0a 	mov.w	ip, #10
 80036e4:	9a07      	ldr	r2, [sp, #28]
 80036e6:	4621      	mov	r1, r4
 80036e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036ec:	3b30      	subs	r3, #48	; 0x30
 80036ee:	2b09      	cmp	r3, #9
 80036f0:	d94e      	bls.n	8003790 <_vfiprintf_r+0x1c4>
 80036f2:	b1b0      	cbz	r0, 8003722 <_vfiprintf_r+0x156>
 80036f4:	9207      	str	r2, [sp, #28]
 80036f6:	e014      	b.n	8003722 <_vfiprintf_r+0x156>
 80036f8:	eba0 0308 	sub.w	r3, r0, r8
 80036fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003700:	4313      	orrs	r3, r2
 8003702:	46a2      	mov	sl, r4
 8003704:	9304      	str	r3, [sp, #16]
 8003706:	e7d2      	b.n	80036ae <_vfiprintf_r+0xe2>
 8003708:	9b03      	ldr	r3, [sp, #12]
 800370a:	1d19      	adds	r1, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	9103      	str	r1, [sp, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	bfbb      	ittet	lt
 8003714:	425b      	neglt	r3, r3
 8003716:	f042 0202 	orrlt.w	r2, r2, #2
 800371a:	9307      	strge	r3, [sp, #28]
 800371c:	9307      	strlt	r3, [sp, #28]
 800371e:	bfb8      	it	lt
 8003720:	9204      	strlt	r2, [sp, #16]
 8003722:	7823      	ldrb	r3, [r4, #0]
 8003724:	2b2e      	cmp	r3, #46	; 0x2e
 8003726:	d10c      	bne.n	8003742 <_vfiprintf_r+0x176>
 8003728:	7863      	ldrb	r3, [r4, #1]
 800372a:	2b2a      	cmp	r3, #42	; 0x2a
 800372c:	d135      	bne.n	800379a <_vfiprintf_r+0x1ce>
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	3402      	adds	r4, #2
 8003732:	1d1a      	adds	r2, r3, #4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	9203      	str	r2, [sp, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	bfb8      	it	lt
 800373c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003740:	9305      	str	r3, [sp, #20]
 8003742:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003828 <_vfiprintf_r+0x25c>
 8003746:	2203      	movs	r2, #3
 8003748:	4650      	mov	r0, sl
 800374a:	7821      	ldrb	r1, [r4, #0]
 800374c:	f000 fc72 	bl	8004034 <memchr>
 8003750:	b140      	cbz	r0, 8003764 <_vfiprintf_r+0x198>
 8003752:	2340      	movs	r3, #64	; 0x40
 8003754:	eba0 000a 	sub.w	r0, r0, sl
 8003758:	fa03 f000 	lsl.w	r0, r3, r0
 800375c:	9b04      	ldr	r3, [sp, #16]
 800375e:	3401      	adds	r4, #1
 8003760:	4303      	orrs	r3, r0
 8003762:	9304      	str	r3, [sp, #16]
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	2206      	movs	r2, #6
 800376a:	482c      	ldr	r0, [pc, #176]	; (800381c <_vfiprintf_r+0x250>)
 800376c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003770:	f000 fc60 	bl	8004034 <memchr>
 8003774:	2800      	cmp	r0, #0
 8003776:	d03f      	beq.n	80037f8 <_vfiprintf_r+0x22c>
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <_vfiprintf_r+0x254>)
 800377a:	bb1b      	cbnz	r3, 80037c4 <_vfiprintf_r+0x1f8>
 800377c:	9b03      	ldr	r3, [sp, #12]
 800377e:	3307      	adds	r3, #7
 8003780:	f023 0307 	bic.w	r3, r3, #7
 8003784:	3308      	adds	r3, #8
 8003786:	9303      	str	r3, [sp, #12]
 8003788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800378a:	443b      	add	r3, r7
 800378c:	9309      	str	r3, [sp, #36]	; 0x24
 800378e:	e767      	b.n	8003660 <_vfiprintf_r+0x94>
 8003790:	460c      	mov	r4, r1
 8003792:	2001      	movs	r0, #1
 8003794:	fb0c 3202 	mla	r2, ip, r2, r3
 8003798:	e7a5      	b.n	80036e6 <_vfiprintf_r+0x11a>
 800379a:	2300      	movs	r3, #0
 800379c:	f04f 0c0a 	mov.w	ip, #10
 80037a0:	4619      	mov	r1, r3
 80037a2:	3401      	adds	r4, #1
 80037a4:	9305      	str	r3, [sp, #20]
 80037a6:	4620      	mov	r0, r4
 80037a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ac:	3a30      	subs	r2, #48	; 0x30
 80037ae:	2a09      	cmp	r2, #9
 80037b0:	d903      	bls.n	80037ba <_vfiprintf_r+0x1ee>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0c5      	beq.n	8003742 <_vfiprintf_r+0x176>
 80037b6:	9105      	str	r1, [sp, #20]
 80037b8:	e7c3      	b.n	8003742 <_vfiprintf_r+0x176>
 80037ba:	4604      	mov	r4, r0
 80037bc:	2301      	movs	r3, #1
 80037be:	fb0c 2101 	mla	r1, ip, r1, r2
 80037c2:	e7f0      	b.n	80037a6 <_vfiprintf_r+0x1da>
 80037c4:	ab03      	add	r3, sp, #12
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	462a      	mov	r2, r5
 80037ca:	4630      	mov	r0, r6
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <_vfiprintf_r+0x258>)
 80037ce:	a904      	add	r1, sp, #16
 80037d0:	f3af 8000 	nop.w
 80037d4:	4607      	mov	r7, r0
 80037d6:	1c78      	adds	r0, r7, #1
 80037d8:	d1d6      	bne.n	8003788 <_vfiprintf_r+0x1bc>
 80037da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037dc:	07d9      	lsls	r1, r3, #31
 80037de:	d405      	bmi.n	80037ec <_vfiprintf_r+0x220>
 80037e0:	89ab      	ldrh	r3, [r5, #12]
 80037e2:	059a      	lsls	r2, r3, #22
 80037e4:	d402      	bmi.n	80037ec <_vfiprintf_r+0x220>
 80037e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037e8:	f7ff fe6d 	bl	80034c6 <__retarget_lock_release_recursive>
 80037ec:	89ab      	ldrh	r3, [r5, #12]
 80037ee:	065b      	lsls	r3, r3, #25
 80037f0:	f53f af12 	bmi.w	8003618 <_vfiprintf_r+0x4c>
 80037f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037f6:	e711      	b.n	800361c <_vfiprintf_r+0x50>
 80037f8:	ab03      	add	r3, sp, #12
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	462a      	mov	r2, r5
 80037fe:	4630      	mov	r0, r6
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <_vfiprintf_r+0x258>)
 8003802:	a904      	add	r1, sp, #16
 8003804:	f000 f882 	bl	800390c <_printf_i>
 8003808:	e7e4      	b.n	80037d4 <_vfiprintf_r+0x208>
 800380a:	bf00      	nop
 800380c:	08004248 	.word	0x08004248
 8003810:	08004268 	.word	0x08004268
 8003814:	08004228 	.word	0x08004228
 8003818:	08004288 	.word	0x08004288
 800381c:	08004292 	.word	0x08004292
 8003820:	00000000 	.word	0x00000000
 8003824:	080035a7 	.word	0x080035a7
 8003828:	0800428e 	.word	0x0800428e

0800382c <_printf_common>:
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	4616      	mov	r6, r2
 8003832:	4699      	mov	r9, r3
 8003834:	688a      	ldr	r2, [r1, #8]
 8003836:	690b      	ldr	r3, [r1, #16]
 8003838:	4607      	mov	r7, r0
 800383a:	4293      	cmp	r3, r2
 800383c:	bfb8      	it	lt
 800383e:	4613      	movlt	r3, r2
 8003840:	6033      	str	r3, [r6, #0]
 8003842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003846:	460c      	mov	r4, r1
 8003848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800384c:	b10a      	cbz	r2, 8003852 <_printf_common+0x26>
 800384e:	3301      	adds	r3, #1
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	0699      	lsls	r1, r3, #26
 8003856:	bf42      	ittt	mi
 8003858:	6833      	ldrmi	r3, [r6, #0]
 800385a:	3302      	addmi	r3, #2
 800385c:	6033      	strmi	r3, [r6, #0]
 800385e:	6825      	ldr	r5, [r4, #0]
 8003860:	f015 0506 	ands.w	r5, r5, #6
 8003864:	d106      	bne.n	8003874 <_printf_common+0x48>
 8003866:	f104 0a19 	add.w	sl, r4, #25
 800386a:	68e3      	ldr	r3, [r4, #12]
 800386c:	6832      	ldr	r2, [r6, #0]
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	42ab      	cmp	r3, r5
 8003872:	dc28      	bgt.n	80038c6 <_printf_common+0x9a>
 8003874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003878:	1e13      	subs	r3, r2, #0
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	bf18      	it	ne
 800387e:	2301      	movne	r3, #1
 8003880:	0692      	lsls	r2, r2, #26
 8003882:	d42d      	bmi.n	80038e0 <_printf_common+0xb4>
 8003884:	4649      	mov	r1, r9
 8003886:	4638      	mov	r0, r7
 8003888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800388c:	47c0      	blx	r8
 800388e:	3001      	adds	r0, #1
 8003890:	d020      	beq.n	80038d4 <_printf_common+0xa8>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	68e5      	ldr	r5, [r4, #12]
 8003896:	f003 0306 	and.w	r3, r3, #6
 800389a:	2b04      	cmp	r3, #4
 800389c:	bf18      	it	ne
 800389e:	2500      	movne	r5, #0
 80038a0:	6832      	ldr	r2, [r6, #0]
 80038a2:	f04f 0600 	mov.w	r6, #0
 80038a6:	68a3      	ldr	r3, [r4, #8]
 80038a8:	bf08      	it	eq
 80038aa:	1aad      	subeq	r5, r5, r2
 80038ac:	6922      	ldr	r2, [r4, #16]
 80038ae:	bf08      	it	eq
 80038b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b4:	4293      	cmp	r3, r2
 80038b6:	bfc4      	itt	gt
 80038b8:	1a9b      	subgt	r3, r3, r2
 80038ba:	18ed      	addgt	r5, r5, r3
 80038bc:	341a      	adds	r4, #26
 80038be:	42b5      	cmp	r5, r6
 80038c0:	d11a      	bne.n	80038f8 <_printf_common+0xcc>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e008      	b.n	80038d8 <_printf_common+0xac>
 80038c6:	2301      	movs	r3, #1
 80038c8:	4652      	mov	r2, sl
 80038ca:	4649      	mov	r1, r9
 80038cc:	4638      	mov	r0, r7
 80038ce:	47c0      	blx	r8
 80038d0:	3001      	adds	r0, #1
 80038d2:	d103      	bne.n	80038dc <_printf_common+0xb0>
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038dc:	3501      	adds	r5, #1
 80038de:	e7c4      	b.n	800386a <_printf_common+0x3e>
 80038e0:	2030      	movs	r0, #48	; 0x30
 80038e2:	18e1      	adds	r1, r4, r3
 80038e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038ee:	4422      	add	r2, r4
 80038f0:	3302      	adds	r3, #2
 80038f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038f6:	e7c5      	b.n	8003884 <_printf_common+0x58>
 80038f8:	2301      	movs	r3, #1
 80038fa:	4622      	mov	r2, r4
 80038fc:	4649      	mov	r1, r9
 80038fe:	4638      	mov	r0, r7
 8003900:	47c0      	blx	r8
 8003902:	3001      	adds	r0, #1
 8003904:	d0e6      	beq.n	80038d4 <_printf_common+0xa8>
 8003906:	3601      	adds	r6, #1
 8003908:	e7d9      	b.n	80038be <_printf_common+0x92>
	...

0800390c <_printf_i>:
 800390c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	460c      	mov	r4, r1
 8003912:	7e27      	ldrb	r7, [r4, #24]
 8003914:	4691      	mov	r9, r2
 8003916:	2f78      	cmp	r7, #120	; 0x78
 8003918:	4680      	mov	r8, r0
 800391a:	469a      	mov	sl, r3
 800391c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800391e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003922:	d807      	bhi.n	8003934 <_printf_i+0x28>
 8003924:	2f62      	cmp	r7, #98	; 0x62
 8003926:	d80a      	bhi.n	800393e <_printf_i+0x32>
 8003928:	2f00      	cmp	r7, #0
 800392a:	f000 80d9 	beq.w	8003ae0 <_printf_i+0x1d4>
 800392e:	2f58      	cmp	r7, #88	; 0x58
 8003930:	f000 80a4 	beq.w	8003a7c <_printf_i+0x170>
 8003934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800393c:	e03a      	b.n	80039b4 <_printf_i+0xa8>
 800393e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003942:	2b15      	cmp	r3, #21
 8003944:	d8f6      	bhi.n	8003934 <_printf_i+0x28>
 8003946:	a001      	add	r0, pc, #4	; (adr r0, 800394c <_printf_i+0x40>)
 8003948:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800394c:	080039a5 	.word	0x080039a5
 8003950:	080039b9 	.word	0x080039b9
 8003954:	08003935 	.word	0x08003935
 8003958:	08003935 	.word	0x08003935
 800395c:	08003935 	.word	0x08003935
 8003960:	08003935 	.word	0x08003935
 8003964:	080039b9 	.word	0x080039b9
 8003968:	08003935 	.word	0x08003935
 800396c:	08003935 	.word	0x08003935
 8003970:	08003935 	.word	0x08003935
 8003974:	08003935 	.word	0x08003935
 8003978:	08003ac7 	.word	0x08003ac7
 800397c:	080039e9 	.word	0x080039e9
 8003980:	08003aa9 	.word	0x08003aa9
 8003984:	08003935 	.word	0x08003935
 8003988:	08003935 	.word	0x08003935
 800398c:	08003ae9 	.word	0x08003ae9
 8003990:	08003935 	.word	0x08003935
 8003994:	080039e9 	.word	0x080039e9
 8003998:	08003935 	.word	0x08003935
 800399c:	08003935 	.word	0x08003935
 80039a0:	08003ab1 	.word	0x08003ab1
 80039a4:	680b      	ldr	r3, [r1, #0]
 80039a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039aa:	1d1a      	adds	r2, r3, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	600a      	str	r2, [r1, #0]
 80039b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0a4      	b.n	8003b02 <_printf_i+0x1f6>
 80039b8:	6825      	ldr	r5, [r4, #0]
 80039ba:	6808      	ldr	r0, [r1, #0]
 80039bc:	062e      	lsls	r6, r5, #24
 80039be:	f100 0304 	add.w	r3, r0, #4
 80039c2:	d50a      	bpl.n	80039da <_printf_i+0xce>
 80039c4:	6805      	ldr	r5, [r0, #0]
 80039c6:	600b      	str	r3, [r1, #0]
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	da03      	bge.n	80039d4 <_printf_i+0xc8>
 80039cc:	232d      	movs	r3, #45	; 0x2d
 80039ce:	426d      	negs	r5, r5
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d4:	230a      	movs	r3, #10
 80039d6:	485e      	ldr	r0, [pc, #376]	; (8003b50 <_printf_i+0x244>)
 80039d8:	e019      	b.n	8003a0e <_printf_i+0x102>
 80039da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039de:	6805      	ldr	r5, [r0, #0]
 80039e0:	600b      	str	r3, [r1, #0]
 80039e2:	bf18      	it	ne
 80039e4:	b22d      	sxthne	r5, r5
 80039e6:	e7ef      	b.n	80039c8 <_printf_i+0xbc>
 80039e8:	680b      	ldr	r3, [r1, #0]
 80039ea:	6825      	ldr	r5, [r4, #0]
 80039ec:	1d18      	adds	r0, r3, #4
 80039ee:	6008      	str	r0, [r1, #0]
 80039f0:	0628      	lsls	r0, r5, #24
 80039f2:	d501      	bpl.n	80039f8 <_printf_i+0xec>
 80039f4:	681d      	ldr	r5, [r3, #0]
 80039f6:	e002      	b.n	80039fe <_printf_i+0xf2>
 80039f8:	0669      	lsls	r1, r5, #25
 80039fa:	d5fb      	bpl.n	80039f4 <_printf_i+0xe8>
 80039fc:	881d      	ldrh	r5, [r3, #0]
 80039fe:	2f6f      	cmp	r7, #111	; 0x6f
 8003a00:	bf0c      	ite	eq
 8003a02:	2308      	moveq	r3, #8
 8003a04:	230a      	movne	r3, #10
 8003a06:	4852      	ldr	r0, [pc, #328]	; (8003b50 <_printf_i+0x244>)
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a0e:	6866      	ldr	r6, [r4, #4]
 8003a10:	2e00      	cmp	r6, #0
 8003a12:	bfa8      	it	ge
 8003a14:	6821      	ldrge	r1, [r4, #0]
 8003a16:	60a6      	str	r6, [r4, #8]
 8003a18:	bfa4      	itt	ge
 8003a1a:	f021 0104 	bicge.w	r1, r1, #4
 8003a1e:	6021      	strge	r1, [r4, #0]
 8003a20:	b90d      	cbnz	r5, 8003a26 <_printf_i+0x11a>
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	d04d      	beq.n	8003ac2 <_printf_i+0x1b6>
 8003a26:	4616      	mov	r6, r2
 8003a28:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a2c:	fb03 5711 	mls	r7, r3, r1, r5
 8003a30:	5dc7      	ldrb	r7, [r0, r7]
 8003a32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a36:	462f      	mov	r7, r5
 8003a38:	42bb      	cmp	r3, r7
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	d9f4      	bls.n	8003a28 <_printf_i+0x11c>
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d10b      	bne.n	8003a5a <_printf_i+0x14e>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	07df      	lsls	r7, r3, #31
 8003a46:	d508      	bpl.n	8003a5a <_printf_i+0x14e>
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	6861      	ldr	r1, [r4, #4]
 8003a4c:	4299      	cmp	r1, r3
 8003a4e:	bfde      	ittt	le
 8003a50:	2330      	movle	r3, #48	; 0x30
 8003a52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a5a:	1b92      	subs	r2, r2, r6
 8003a5c:	6122      	str	r2, [r4, #16]
 8003a5e:	464b      	mov	r3, r9
 8003a60:	4621      	mov	r1, r4
 8003a62:	4640      	mov	r0, r8
 8003a64:	f8cd a000 	str.w	sl, [sp]
 8003a68:	aa03      	add	r2, sp, #12
 8003a6a:	f7ff fedf 	bl	800382c <_printf_common>
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d14c      	bne.n	8003b0c <_printf_i+0x200>
 8003a72:	f04f 30ff 	mov.w	r0, #4294967295
 8003a76:	b004      	add	sp, #16
 8003a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7c:	4834      	ldr	r0, [pc, #208]	; (8003b50 <_printf_i+0x244>)
 8003a7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a82:	680e      	ldr	r6, [r1, #0]
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a8a:	061f      	lsls	r7, r3, #24
 8003a8c:	600e      	str	r6, [r1, #0]
 8003a8e:	d514      	bpl.n	8003aba <_printf_i+0x1ae>
 8003a90:	07d9      	lsls	r1, r3, #31
 8003a92:	bf44      	itt	mi
 8003a94:	f043 0320 	orrmi.w	r3, r3, #32
 8003a98:	6023      	strmi	r3, [r4, #0]
 8003a9a:	b91d      	cbnz	r5, 8003aa4 <_printf_i+0x198>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f023 0320 	bic.w	r3, r3, #32
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	e7af      	b.n	8003a08 <_printf_i+0xfc>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	f043 0320 	orr.w	r3, r3, #32
 8003aae:	6023      	str	r3, [r4, #0]
 8003ab0:	2378      	movs	r3, #120	; 0x78
 8003ab2:	4828      	ldr	r0, [pc, #160]	; (8003b54 <_printf_i+0x248>)
 8003ab4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ab8:	e7e3      	b.n	8003a82 <_printf_i+0x176>
 8003aba:	065e      	lsls	r6, r3, #25
 8003abc:	bf48      	it	mi
 8003abe:	b2ad      	uxthmi	r5, r5
 8003ac0:	e7e6      	b.n	8003a90 <_printf_i+0x184>
 8003ac2:	4616      	mov	r6, r2
 8003ac4:	e7bb      	b.n	8003a3e <_printf_i+0x132>
 8003ac6:	680b      	ldr	r3, [r1, #0]
 8003ac8:	6826      	ldr	r6, [r4, #0]
 8003aca:	1d1d      	adds	r5, r3, #4
 8003acc:	6960      	ldr	r0, [r4, #20]
 8003ace:	600d      	str	r5, [r1, #0]
 8003ad0:	0635      	lsls	r5, r6, #24
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	d501      	bpl.n	8003ada <_printf_i+0x1ce>
 8003ad6:	6018      	str	r0, [r3, #0]
 8003ad8:	e002      	b.n	8003ae0 <_printf_i+0x1d4>
 8003ada:	0671      	lsls	r1, r6, #25
 8003adc:	d5fb      	bpl.n	8003ad6 <_printf_i+0x1ca>
 8003ade:	8018      	strh	r0, [r3, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4616      	mov	r6, r2
 8003ae4:	6123      	str	r3, [r4, #16]
 8003ae6:	e7ba      	b.n	8003a5e <_printf_i+0x152>
 8003ae8:	680b      	ldr	r3, [r1, #0]
 8003aea:	1d1a      	adds	r2, r3, #4
 8003aec:	600a      	str	r2, [r1, #0]
 8003aee:	681e      	ldr	r6, [r3, #0]
 8003af0:	2100      	movs	r1, #0
 8003af2:	4630      	mov	r0, r6
 8003af4:	6862      	ldr	r2, [r4, #4]
 8003af6:	f000 fa9d 	bl	8004034 <memchr>
 8003afa:	b108      	cbz	r0, 8003b00 <_printf_i+0x1f4>
 8003afc:	1b80      	subs	r0, r0, r6
 8003afe:	6060      	str	r0, [r4, #4]
 8003b00:	6863      	ldr	r3, [r4, #4]
 8003b02:	6123      	str	r3, [r4, #16]
 8003b04:	2300      	movs	r3, #0
 8003b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b0a:	e7a8      	b.n	8003a5e <_printf_i+0x152>
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4649      	mov	r1, r9
 8003b10:	4640      	mov	r0, r8
 8003b12:	6923      	ldr	r3, [r4, #16]
 8003b14:	47d0      	blx	sl
 8003b16:	3001      	adds	r0, #1
 8003b18:	d0ab      	beq.n	8003a72 <_printf_i+0x166>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	079b      	lsls	r3, r3, #30
 8003b1e:	d413      	bmi.n	8003b48 <_printf_i+0x23c>
 8003b20:	68e0      	ldr	r0, [r4, #12]
 8003b22:	9b03      	ldr	r3, [sp, #12]
 8003b24:	4298      	cmp	r0, r3
 8003b26:	bfb8      	it	lt
 8003b28:	4618      	movlt	r0, r3
 8003b2a:	e7a4      	b.n	8003a76 <_printf_i+0x16a>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	4632      	mov	r2, r6
 8003b30:	4649      	mov	r1, r9
 8003b32:	4640      	mov	r0, r8
 8003b34:	47d0      	blx	sl
 8003b36:	3001      	adds	r0, #1
 8003b38:	d09b      	beq.n	8003a72 <_printf_i+0x166>
 8003b3a:	3501      	adds	r5, #1
 8003b3c:	68e3      	ldr	r3, [r4, #12]
 8003b3e:	9903      	ldr	r1, [sp, #12]
 8003b40:	1a5b      	subs	r3, r3, r1
 8003b42:	42ab      	cmp	r3, r5
 8003b44:	dcf2      	bgt.n	8003b2c <_printf_i+0x220>
 8003b46:	e7eb      	b.n	8003b20 <_printf_i+0x214>
 8003b48:	2500      	movs	r5, #0
 8003b4a:	f104 0619 	add.w	r6, r4, #25
 8003b4e:	e7f5      	b.n	8003b3c <_printf_i+0x230>
 8003b50:	08004299 	.word	0x08004299
 8003b54:	080042aa 	.word	0x080042aa

08003b58 <_sbrk_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4d05      	ldr	r5, [pc, #20]	; (8003b74 <_sbrk_r+0x1c>)
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4608      	mov	r0, r1
 8003b62:	602b      	str	r3, [r5, #0]
 8003b64:	f7fd f850 	bl	8000c08 <_sbrk>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_sbrk_r+0x1a>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_sbrk_r+0x1a>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	2000047c 	.word	0x2000047c

08003b78 <__sread>:
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b80:	f000 fabe 	bl	8004100 <_read_r>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	bfab      	itete	ge
 8003b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003b8c:	181b      	addge	r3, r3, r0
 8003b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b92:	bfac      	ite	ge
 8003b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b96:	81a3      	strhlt	r3, [r4, #12]
 8003b98:	bd10      	pop	{r4, pc}

08003b9a <__swrite>:
 8003b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9e:	461f      	mov	r7, r3
 8003ba0:	898b      	ldrh	r3, [r1, #12]
 8003ba2:	4605      	mov	r5, r0
 8003ba4:	05db      	lsls	r3, r3, #23
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	4616      	mov	r6, r2
 8003baa:	d505      	bpl.n	8003bb8 <__swrite+0x1e>
 8003bac:	2302      	movs	r3, #2
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb4:	f000 f9c8 	bl	8003f48 <_lseek_r>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	4632      	mov	r2, r6
 8003bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc0:	81a3      	strh	r3, [r4, #12]
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	f000 b869 	b.w	8003ca4 <_write_r>

08003bd2 <__sseek>:
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bda:	f000 f9b5 	bl	8003f48 <_lseek_r>
 8003bde:	1c43      	adds	r3, r0, #1
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	bf15      	itete	ne
 8003be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bee:	81a3      	strheq	r3, [r4, #12]
 8003bf0:	bf18      	it	ne
 8003bf2:	81a3      	strhne	r3, [r4, #12]
 8003bf4:	bd10      	pop	{r4, pc}

08003bf6 <__sclose>:
 8003bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bfa:	f000 b8d3 	b.w	8003da4 <_close_r>
	...

08003c00 <__swbuf_r>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	460e      	mov	r6, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	4605      	mov	r5, r0
 8003c08:	b118      	cbz	r0, 8003c12 <__swbuf_r+0x12>
 8003c0a:	6983      	ldr	r3, [r0, #24]
 8003c0c:	b90b      	cbnz	r3, 8003c12 <__swbuf_r+0x12>
 8003c0e:	f7ff fbbb 	bl	8003388 <__sinit>
 8003c12:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <__swbuf_r+0x98>)
 8003c14:	429c      	cmp	r4, r3
 8003c16:	d12b      	bne.n	8003c70 <__swbuf_r+0x70>
 8003c18:	686c      	ldr	r4, [r5, #4]
 8003c1a:	69a3      	ldr	r3, [r4, #24]
 8003c1c:	60a3      	str	r3, [r4, #8]
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	071a      	lsls	r2, r3, #28
 8003c22:	d52f      	bpl.n	8003c84 <__swbuf_r+0x84>
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	b36b      	cbz	r3, 8003c84 <__swbuf_r+0x84>
 8003c28:	6923      	ldr	r3, [r4, #16]
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	b2f6      	uxtb	r6, r6
 8003c2e:	1ac0      	subs	r0, r0, r3
 8003c30:	6963      	ldr	r3, [r4, #20]
 8003c32:	4637      	mov	r7, r6
 8003c34:	4283      	cmp	r3, r0
 8003c36:	dc04      	bgt.n	8003c42 <__swbuf_r+0x42>
 8003c38:	4621      	mov	r1, r4
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f000 f948 	bl	8003ed0 <_fflush_r>
 8003c40:	bb30      	cbnz	r0, 8003c90 <__swbuf_r+0x90>
 8003c42:	68a3      	ldr	r3, [r4, #8]
 8003c44:	3001      	adds	r0, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	60a3      	str	r3, [r4, #8]
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	6022      	str	r2, [r4, #0]
 8003c50:	701e      	strb	r6, [r3, #0]
 8003c52:	6963      	ldr	r3, [r4, #20]
 8003c54:	4283      	cmp	r3, r0
 8003c56:	d004      	beq.n	8003c62 <__swbuf_r+0x62>
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	07db      	lsls	r3, r3, #31
 8003c5c:	d506      	bpl.n	8003c6c <__swbuf_r+0x6c>
 8003c5e:	2e0a      	cmp	r6, #10
 8003c60:	d104      	bne.n	8003c6c <__swbuf_r+0x6c>
 8003c62:	4621      	mov	r1, r4
 8003c64:	4628      	mov	r0, r5
 8003c66:	f000 f933 	bl	8003ed0 <_fflush_r>
 8003c6a:	b988      	cbnz	r0, 8003c90 <__swbuf_r+0x90>
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <__swbuf_r+0x9c>)
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d101      	bne.n	8003c7a <__swbuf_r+0x7a>
 8003c76:	68ac      	ldr	r4, [r5, #8]
 8003c78:	e7cf      	b.n	8003c1a <__swbuf_r+0x1a>
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <__swbuf_r+0xa0>)
 8003c7c:	429c      	cmp	r4, r3
 8003c7e:	bf08      	it	eq
 8003c80:	68ec      	ldreq	r4, [r5, #12]
 8003c82:	e7ca      	b.n	8003c1a <__swbuf_r+0x1a>
 8003c84:	4621      	mov	r1, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f81e 	bl	8003cc8 <__swsetup_r>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d0cb      	beq.n	8003c28 <__swbuf_r+0x28>
 8003c90:	f04f 37ff 	mov.w	r7, #4294967295
 8003c94:	e7ea      	b.n	8003c6c <__swbuf_r+0x6c>
 8003c96:	bf00      	nop
 8003c98:	08004248 	.word	0x08004248
 8003c9c:	08004268 	.word	0x08004268
 8003ca0:	08004228 	.word	0x08004228

08003ca4 <_write_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	2200      	movs	r2, #0
 8003cae:	4d05      	ldr	r5, [pc, #20]	; (8003cc4 <_write_r+0x20>)
 8003cb0:	602a      	str	r2, [r5, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f7fd f848 	bl	8000d48 <_write>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d102      	bne.n	8003cc2 <_write_r+0x1e>
 8003cbc:	682b      	ldr	r3, [r5, #0]
 8003cbe:	b103      	cbz	r3, 8003cc2 <_write_r+0x1e>
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}
 8003cc4:	2000047c 	.word	0x2000047c

08003cc8 <__swsetup_r>:
 8003cc8:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <__swsetup_r+0xcc>)
 8003cca:	b570      	push	{r4, r5, r6, lr}
 8003ccc:	681d      	ldr	r5, [r3, #0]
 8003cce:	4606      	mov	r6, r0
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	b125      	cbz	r5, 8003cde <__swsetup_r+0x16>
 8003cd4:	69ab      	ldr	r3, [r5, #24]
 8003cd6:	b913      	cbnz	r3, 8003cde <__swsetup_r+0x16>
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f7ff fb55 	bl	8003388 <__sinit>
 8003cde:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <__swsetup_r+0xd0>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d10f      	bne.n	8003d04 <__swsetup_r+0x3c>
 8003ce4:	686c      	ldr	r4, [r5, #4]
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cec:	0719      	lsls	r1, r3, #28
 8003cee:	d42c      	bmi.n	8003d4a <__swsetup_r+0x82>
 8003cf0:	06dd      	lsls	r5, r3, #27
 8003cf2:	d411      	bmi.n	8003d18 <__swsetup_r+0x50>
 8003cf4:	2309      	movs	r3, #9
 8003cf6:	6033      	str	r3, [r6, #0]
 8003cf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	e03e      	b.n	8003d82 <__swsetup_r+0xba>
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <__swsetup_r+0xd4>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d101      	bne.n	8003d0e <__swsetup_r+0x46>
 8003d0a:	68ac      	ldr	r4, [r5, #8]
 8003d0c:	e7eb      	b.n	8003ce6 <__swsetup_r+0x1e>
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <__swsetup_r+0xd8>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	bf08      	it	eq
 8003d14:	68ec      	ldreq	r4, [r5, #12]
 8003d16:	e7e6      	b.n	8003ce6 <__swsetup_r+0x1e>
 8003d18:	0758      	lsls	r0, r3, #29
 8003d1a:	d512      	bpl.n	8003d42 <__swsetup_r+0x7a>
 8003d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d1e:	b141      	cbz	r1, 8003d32 <__swsetup_r+0x6a>
 8003d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d24:	4299      	cmp	r1, r3
 8003d26:	d002      	beq.n	8003d2e <__swsetup_r+0x66>
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f000 f99d 	bl	8004068 <_free_r>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6363      	str	r3, [r4, #52]	; 0x34
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6063      	str	r3, [r4, #4]
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	f043 0308 	orr.w	r3, r3, #8
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	6923      	ldr	r3, [r4, #16]
 8003d4c:	b94b      	cbnz	r3, 8003d62 <__swsetup_r+0x9a>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d58:	d003      	beq.n	8003d62 <__swsetup_r+0x9a>
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f000 f929 	bl	8003fb4 <__smakebuf_r>
 8003d62:	89a0      	ldrh	r0, [r4, #12]
 8003d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d68:	f010 0301 	ands.w	r3, r0, #1
 8003d6c:	d00a      	beq.n	8003d84 <__swsetup_r+0xbc>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60a3      	str	r3, [r4, #8]
 8003d72:	6963      	ldr	r3, [r4, #20]
 8003d74:	425b      	negs	r3, r3
 8003d76:	61a3      	str	r3, [r4, #24]
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	b943      	cbnz	r3, 8003d8e <__swsetup_r+0xc6>
 8003d7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d80:	d1ba      	bne.n	8003cf8 <__swsetup_r+0x30>
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	0781      	lsls	r1, r0, #30
 8003d86:	bf58      	it	pl
 8003d88:	6963      	ldrpl	r3, [r4, #20]
 8003d8a:	60a3      	str	r3, [r4, #8]
 8003d8c:	e7f4      	b.n	8003d78 <__swsetup_r+0xb0>
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e7f7      	b.n	8003d82 <__swsetup_r+0xba>
 8003d92:	bf00      	nop
 8003d94:	2000000c 	.word	0x2000000c
 8003d98:	08004248 	.word	0x08004248
 8003d9c:	08004268 	.word	0x08004268
 8003da0:	08004228 	.word	0x08004228

08003da4 <_close_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	2300      	movs	r3, #0
 8003da8:	4d05      	ldr	r5, [pc, #20]	; (8003dc0 <_close_r+0x1c>)
 8003daa:	4604      	mov	r4, r0
 8003dac:	4608      	mov	r0, r1
 8003dae:	602b      	str	r3, [r5, #0]
 8003db0:	f7fc fef9 	bl	8000ba6 <_close>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	d102      	bne.n	8003dbe <_close_r+0x1a>
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	b103      	cbz	r3, 8003dbe <_close_r+0x1a>
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	bd38      	pop	{r3, r4, r5, pc}
 8003dc0:	2000047c 	.word	0x2000047c

08003dc4 <__sflush_r>:
 8003dc4:	898a      	ldrh	r2, [r1, #12]
 8003dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dca:	4605      	mov	r5, r0
 8003dcc:	0710      	lsls	r0, r2, #28
 8003dce:	460c      	mov	r4, r1
 8003dd0:	d458      	bmi.n	8003e84 <__sflush_r+0xc0>
 8003dd2:	684b      	ldr	r3, [r1, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	dc05      	bgt.n	8003de4 <__sflush_r+0x20>
 8003dd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	dc02      	bgt.n	8003de4 <__sflush_r+0x20>
 8003dde:	2000      	movs	r0, #0
 8003de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	d0f9      	beq.n	8003dde <__sflush_r+0x1a>
 8003dea:	2300      	movs	r3, #0
 8003dec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003df0:	682f      	ldr	r7, [r5, #0]
 8003df2:	602b      	str	r3, [r5, #0]
 8003df4:	d032      	beq.n	8003e5c <__sflush_r+0x98>
 8003df6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	075a      	lsls	r2, r3, #29
 8003dfc:	d505      	bpl.n	8003e0a <__sflush_r+0x46>
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	1ac0      	subs	r0, r0, r3
 8003e02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e04:	b10b      	cbz	r3, 8003e0a <__sflush_r+0x46>
 8003e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e08:	1ac0      	subs	r0, r0, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e10:	4628      	mov	r0, r5
 8003e12:	6a21      	ldr	r1, [r4, #32]
 8003e14:	47b0      	blx	r6
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	d106      	bne.n	8003e2a <__sflush_r+0x66>
 8003e1c:	6829      	ldr	r1, [r5, #0]
 8003e1e:	291d      	cmp	r1, #29
 8003e20:	d82c      	bhi.n	8003e7c <__sflush_r+0xb8>
 8003e22:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <__sflush_r+0x108>)
 8003e24:	40ca      	lsrs	r2, r1
 8003e26:	07d6      	lsls	r6, r2, #31
 8003e28:	d528      	bpl.n	8003e7c <__sflush_r+0xb8>
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	6062      	str	r2, [r4, #4]
 8003e2e:	6922      	ldr	r2, [r4, #16]
 8003e30:	04d9      	lsls	r1, r3, #19
 8003e32:	6022      	str	r2, [r4, #0]
 8003e34:	d504      	bpl.n	8003e40 <__sflush_r+0x7c>
 8003e36:	1c42      	adds	r2, r0, #1
 8003e38:	d101      	bne.n	8003e3e <__sflush_r+0x7a>
 8003e3a:	682b      	ldr	r3, [r5, #0]
 8003e3c:	b903      	cbnz	r3, 8003e40 <__sflush_r+0x7c>
 8003e3e:	6560      	str	r0, [r4, #84]	; 0x54
 8003e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e42:	602f      	str	r7, [r5, #0]
 8003e44:	2900      	cmp	r1, #0
 8003e46:	d0ca      	beq.n	8003dde <__sflush_r+0x1a>
 8003e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e4c:	4299      	cmp	r1, r3
 8003e4e:	d002      	beq.n	8003e56 <__sflush_r+0x92>
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f909 	bl	8004068 <_free_r>
 8003e56:	2000      	movs	r0, #0
 8003e58:	6360      	str	r0, [r4, #52]	; 0x34
 8003e5a:	e7c1      	b.n	8003de0 <__sflush_r+0x1c>
 8003e5c:	6a21      	ldr	r1, [r4, #32]
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4628      	mov	r0, r5
 8003e62:	47b0      	blx	r6
 8003e64:	1c41      	adds	r1, r0, #1
 8003e66:	d1c7      	bne.n	8003df8 <__sflush_r+0x34>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0c4      	beq.n	8003df8 <__sflush_r+0x34>
 8003e6e:	2b1d      	cmp	r3, #29
 8003e70:	d001      	beq.n	8003e76 <__sflush_r+0xb2>
 8003e72:	2b16      	cmp	r3, #22
 8003e74:	d101      	bne.n	8003e7a <__sflush_r+0xb6>
 8003e76:	602f      	str	r7, [r5, #0]
 8003e78:	e7b1      	b.n	8003dde <__sflush_r+0x1a>
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e80:	81a3      	strh	r3, [r4, #12]
 8003e82:	e7ad      	b.n	8003de0 <__sflush_r+0x1c>
 8003e84:	690f      	ldr	r7, [r1, #16]
 8003e86:	2f00      	cmp	r7, #0
 8003e88:	d0a9      	beq.n	8003dde <__sflush_r+0x1a>
 8003e8a:	0793      	lsls	r3, r2, #30
 8003e8c:	bf18      	it	ne
 8003e8e:	2300      	movne	r3, #0
 8003e90:	680e      	ldr	r6, [r1, #0]
 8003e92:	bf08      	it	eq
 8003e94:	694b      	ldreq	r3, [r1, #20]
 8003e96:	eba6 0807 	sub.w	r8, r6, r7
 8003e9a:	600f      	str	r7, [r1, #0]
 8003e9c:	608b      	str	r3, [r1, #8]
 8003e9e:	f1b8 0f00 	cmp.w	r8, #0
 8003ea2:	dd9c      	ble.n	8003dde <__sflush_r+0x1a>
 8003ea4:	4643      	mov	r3, r8
 8003ea6:	463a      	mov	r2, r7
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	6a21      	ldr	r1, [r4, #32]
 8003eac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003eae:	47b0      	blx	r6
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	dc06      	bgt.n	8003ec2 <__sflush_r+0xfe>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	e78e      	b.n	8003de0 <__sflush_r+0x1c>
 8003ec2:	4407      	add	r7, r0
 8003ec4:	eba8 0800 	sub.w	r8, r8, r0
 8003ec8:	e7e9      	b.n	8003e9e <__sflush_r+0xda>
 8003eca:	bf00      	nop
 8003ecc:	20400001 	.word	0x20400001

08003ed0 <_fflush_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	690b      	ldr	r3, [r1, #16]
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	b913      	cbnz	r3, 8003ee0 <_fflush_r+0x10>
 8003eda:	2500      	movs	r5, #0
 8003edc:	4628      	mov	r0, r5
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	b118      	cbz	r0, 8003eea <_fflush_r+0x1a>
 8003ee2:	6983      	ldr	r3, [r0, #24]
 8003ee4:	b90b      	cbnz	r3, 8003eea <_fflush_r+0x1a>
 8003ee6:	f7ff fa4f 	bl	8003388 <__sinit>
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <_fflush_r+0x6c>)
 8003eec:	429c      	cmp	r4, r3
 8003eee:	d11b      	bne.n	8003f28 <_fflush_r+0x58>
 8003ef0:	686c      	ldr	r4, [r5, #4]
 8003ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ef      	beq.n	8003eda <_fflush_r+0xa>
 8003efa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003efc:	07d0      	lsls	r0, r2, #31
 8003efe:	d404      	bmi.n	8003f0a <_fflush_r+0x3a>
 8003f00:	0599      	lsls	r1, r3, #22
 8003f02:	d402      	bmi.n	8003f0a <_fflush_r+0x3a>
 8003f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f06:	f7ff fadd 	bl	80034c4 <__retarget_lock_acquire_recursive>
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	f7ff ff59 	bl	8003dc4 <__sflush_r>
 8003f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f14:	4605      	mov	r5, r0
 8003f16:	07da      	lsls	r2, r3, #31
 8003f18:	d4e0      	bmi.n	8003edc <_fflush_r+0xc>
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	059b      	lsls	r3, r3, #22
 8003f1e:	d4dd      	bmi.n	8003edc <_fflush_r+0xc>
 8003f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f22:	f7ff fad0 	bl	80034c6 <__retarget_lock_release_recursive>
 8003f26:	e7d9      	b.n	8003edc <_fflush_r+0xc>
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <_fflush_r+0x70>)
 8003f2a:	429c      	cmp	r4, r3
 8003f2c:	d101      	bne.n	8003f32 <_fflush_r+0x62>
 8003f2e:	68ac      	ldr	r4, [r5, #8]
 8003f30:	e7df      	b.n	8003ef2 <_fflush_r+0x22>
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <_fflush_r+0x74>)
 8003f34:	429c      	cmp	r4, r3
 8003f36:	bf08      	it	eq
 8003f38:	68ec      	ldreq	r4, [r5, #12]
 8003f3a:	e7da      	b.n	8003ef2 <_fflush_r+0x22>
 8003f3c:	08004248 	.word	0x08004248
 8003f40:	08004268 	.word	0x08004268
 8003f44:	08004228 	.word	0x08004228

08003f48 <_lseek_r>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	2200      	movs	r2, #0
 8003f52:	4d05      	ldr	r5, [pc, #20]	; (8003f68 <_lseek_r+0x20>)
 8003f54:	602a      	str	r2, [r5, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f7fc fe49 	bl	8000bee <_lseek>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d102      	bne.n	8003f66 <_lseek_r+0x1e>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	b103      	cbz	r3, 8003f66 <_lseek_r+0x1e>
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	2000047c 	.word	0x2000047c

08003f6c <__swhatbuf_r>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	460e      	mov	r6, r1
 8003f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f74:	4614      	mov	r4, r2
 8003f76:	2900      	cmp	r1, #0
 8003f78:	461d      	mov	r5, r3
 8003f7a:	b096      	sub	sp, #88	; 0x58
 8003f7c:	da07      	bge.n	8003f8e <__swhatbuf_r+0x22>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	602b      	str	r3, [r5, #0]
 8003f82:	89b3      	ldrh	r3, [r6, #12]
 8003f84:	061a      	lsls	r2, r3, #24
 8003f86:	d410      	bmi.n	8003faa <__swhatbuf_r+0x3e>
 8003f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f8c:	e00e      	b.n	8003fac <__swhatbuf_r+0x40>
 8003f8e:	466a      	mov	r2, sp
 8003f90:	f000 f8c8 	bl	8004124 <_fstat_r>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	dbf2      	blt.n	8003f7e <__swhatbuf_r+0x12>
 8003f98:	9a01      	ldr	r2, [sp, #4]
 8003f9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fa2:	425a      	negs	r2, r3
 8003fa4:	415a      	adcs	r2, r3
 8003fa6:	602a      	str	r2, [r5, #0]
 8003fa8:	e7ee      	b.n	8003f88 <__swhatbuf_r+0x1c>
 8003faa:	2340      	movs	r3, #64	; 0x40
 8003fac:	2000      	movs	r0, #0
 8003fae:	6023      	str	r3, [r4, #0]
 8003fb0:	b016      	add	sp, #88	; 0x58
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}

08003fb4 <__smakebuf_r>:
 8003fb4:	898b      	ldrh	r3, [r1, #12]
 8003fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fb8:	079d      	lsls	r5, r3, #30
 8003fba:	4606      	mov	r6, r0
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	d507      	bpl.n	8003fd0 <__smakebuf_r+0x1c>
 8003fc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	6123      	str	r3, [r4, #16]
 8003fc8:	2301      	movs	r3, #1
 8003fca:	6163      	str	r3, [r4, #20]
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	466a      	mov	r2, sp
 8003fd2:	ab01      	add	r3, sp, #4
 8003fd4:	f7ff ffca 	bl	8003f6c <__swhatbuf_r>
 8003fd8:	9900      	ldr	r1, [sp, #0]
 8003fda:	4605      	mov	r5, r0
 8003fdc:	4630      	mov	r0, r6
 8003fde:	f7ff fa73 	bl	80034c8 <_malloc_r>
 8003fe2:	b948      	cbnz	r0, 8003ff8 <__smakebuf_r+0x44>
 8003fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fe8:	059a      	lsls	r2, r3, #22
 8003fea:	d4ef      	bmi.n	8003fcc <__smakebuf_r+0x18>
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	81a3      	strh	r3, [r4, #12]
 8003ff6:	e7e3      	b.n	8003fc0 <__smakebuf_r+0xc>
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <__smakebuf_r+0x7c>)
 8003ffa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ffc:	89a3      	ldrh	r3, [r4, #12]
 8003ffe:	6020      	str	r0, [r4, #0]
 8004000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	9b00      	ldr	r3, [sp, #0]
 8004008:	6120      	str	r0, [r4, #16]
 800400a:	6163      	str	r3, [r4, #20]
 800400c:	9b01      	ldr	r3, [sp, #4]
 800400e:	b15b      	cbz	r3, 8004028 <__smakebuf_r+0x74>
 8004010:	4630      	mov	r0, r6
 8004012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004016:	f000 f897 	bl	8004148 <_isatty_r>
 800401a:	b128      	cbz	r0, 8004028 <__smakebuf_r+0x74>
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	81a3      	strh	r3, [r4, #12]
 8004028:	89a0      	ldrh	r0, [r4, #12]
 800402a:	4305      	orrs	r5, r0
 800402c:	81a5      	strh	r5, [r4, #12]
 800402e:	e7cd      	b.n	8003fcc <__smakebuf_r+0x18>
 8004030:	08003321 	.word	0x08003321

08004034 <memchr>:
 8004034:	4603      	mov	r3, r0
 8004036:	b510      	push	{r4, lr}
 8004038:	b2c9      	uxtb	r1, r1
 800403a:	4402      	add	r2, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	4618      	mov	r0, r3
 8004040:	d101      	bne.n	8004046 <memchr+0x12>
 8004042:	2000      	movs	r0, #0
 8004044:	e003      	b.n	800404e <memchr+0x1a>
 8004046:	7804      	ldrb	r4, [r0, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	428c      	cmp	r4, r1
 800404c:	d1f6      	bne.n	800403c <memchr+0x8>
 800404e:	bd10      	pop	{r4, pc}

08004050 <__malloc_lock>:
 8004050:	4801      	ldr	r0, [pc, #4]	; (8004058 <__malloc_lock+0x8>)
 8004052:	f7ff ba37 	b.w	80034c4 <__retarget_lock_acquire_recursive>
 8004056:	bf00      	nop
 8004058:	20000474 	.word	0x20000474

0800405c <__malloc_unlock>:
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <__malloc_unlock+0x8>)
 800405e:	f7ff ba32 	b.w	80034c6 <__retarget_lock_release_recursive>
 8004062:	bf00      	nop
 8004064:	20000474 	.word	0x20000474

08004068 <_free_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4605      	mov	r5, r0
 800406c:	2900      	cmp	r1, #0
 800406e:	d043      	beq.n	80040f8 <_free_r+0x90>
 8004070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004074:	1f0c      	subs	r4, r1, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	bfb8      	it	lt
 800407a:	18e4      	addlt	r4, r4, r3
 800407c:	f7ff ffe8 	bl	8004050 <__malloc_lock>
 8004080:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <_free_r+0x94>)
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	4610      	mov	r0, r2
 8004086:	b933      	cbnz	r3, 8004096 <_free_r+0x2e>
 8004088:	6063      	str	r3, [r4, #4]
 800408a:	6014      	str	r4, [r2, #0]
 800408c:	4628      	mov	r0, r5
 800408e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004092:	f7ff bfe3 	b.w	800405c <__malloc_unlock>
 8004096:	42a3      	cmp	r3, r4
 8004098:	d90a      	bls.n	80040b0 <_free_r+0x48>
 800409a:	6821      	ldr	r1, [r4, #0]
 800409c:	1862      	adds	r2, r4, r1
 800409e:	4293      	cmp	r3, r2
 80040a0:	bf01      	itttt	eq
 80040a2:	681a      	ldreq	r2, [r3, #0]
 80040a4:	685b      	ldreq	r3, [r3, #4]
 80040a6:	1852      	addeq	r2, r2, r1
 80040a8:	6022      	streq	r2, [r4, #0]
 80040aa:	6063      	str	r3, [r4, #4]
 80040ac:	6004      	str	r4, [r0, #0]
 80040ae:	e7ed      	b.n	800408c <_free_r+0x24>
 80040b0:	461a      	mov	r2, r3
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	b10b      	cbz	r3, 80040ba <_free_r+0x52>
 80040b6:	42a3      	cmp	r3, r4
 80040b8:	d9fa      	bls.n	80040b0 <_free_r+0x48>
 80040ba:	6811      	ldr	r1, [r2, #0]
 80040bc:	1850      	adds	r0, r2, r1
 80040be:	42a0      	cmp	r0, r4
 80040c0:	d10b      	bne.n	80040da <_free_r+0x72>
 80040c2:	6820      	ldr	r0, [r4, #0]
 80040c4:	4401      	add	r1, r0
 80040c6:	1850      	adds	r0, r2, r1
 80040c8:	4283      	cmp	r3, r0
 80040ca:	6011      	str	r1, [r2, #0]
 80040cc:	d1de      	bne.n	800408c <_free_r+0x24>
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4401      	add	r1, r0
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	6053      	str	r3, [r2, #4]
 80040d8:	e7d8      	b.n	800408c <_free_r+0x24>
 80040da:	d902      	bls.n	80040e2 <_free_r+0x7a>
 80040dc:	230c      	movs	r3, #12
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	e7d4      	b.n	800408c <_free_r+0x24>
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	1821      	adds	r1, r4, r0
 80040e6:	428b      	cmp	r3, r1
 80040e8:	bf01      	itttt	eq
 80040ea:	6819      	ldreq	r1, [r3, #0]
 80040ec:	685b      	ldreq	r3, [r3, #4]
 80040ee:	1809      	addeq	r1, r1, r0
 80040f0:	6021      	streq	r1, [r4, #0]
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	6054      	str	r4, [r2, #4]
 80040f6:	e7c9      	b.n	800408c <_free_r+0x24>
 80040f8:	bd38      	pop	{r3, r4, r5, pc}
 80040fa:	bf00      	nop
 80040fc:	200000a8 	.word	0x200000a8

08004100 <_read_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	4611      	mov	r1, r2
 8004108:	2200      	movs	r2, #0
 800410a:	4d05      	ldr	r5, [pc, #20]	; (8004120 <_read_r+0x20>)
 800410c:	602a      	str	r2, [r5, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7fc fd2c 	bl	8000b6c <_read>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_read_r+0x1e>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_read_r+0x1e>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	2000047c 	.word	0x2000047c

08004124 <_fstat_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	2300      	movs	r3, #0
 8004128:	4d06      	ldr	r5, [pc, #24]	; (8004144 <_fstat_r+0x20>)
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	602b      	str	r3, [r5, #0]
 8004132:	f7fc fd43 	bl	8000bbc <_fstat>
 8004136:	1c43      	adds	r3, r0, #1
 8004138:	d102      	bne.n	8004140 <_fstat_r+0x1c>
 800413a:	682b      	ldr	r3, [r5, #0]
 800413c:	b103      	cbz	r3, 8004140 <_fstat_r+0x1c>
 800413e:	6023      	str	r3, [r4, #0]
 8004140:	bd38      	pop	{r3, r4, r5, pc}
 8004142:	bf00      	nop
 8004144:	2000047c 	.word	0x2000047c

08004148 <_isatty_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	2300      	movs	r3, #0
 800414c:	4d05      	ldr	r5, [pc, #20]	; (8004164 <_isatty_r+0x1c>)
 800414e:	4604      	mov	r4, r0
 8004150:	4608      	mov	r0, r1
 8004152:	602b      	str	r3, [r5, #0]
 8004154:	f7fc fd41 	bl	8000bda <_isatty>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d102      	bne.n	8004162 <_isatty_r+0x1a>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	b103      	cbz	r3, 8004162 <_isatty_r+0x1a>
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	2000047c 	.word	0x2000047c

08004168 <_init>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	bf00      	nop
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr

08004174 <_fini>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	bf00      	nop
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr
